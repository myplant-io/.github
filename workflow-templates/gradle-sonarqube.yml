###
# GitHub action that analyzes the code with the sonarqube scanner and pushes
# the result to the myplant sonarqube (sonar-dev.myplant-io).
#
# Prerequisites:
#  - ".github/workflow-config.env" exists
#
# Created by: Daniel Hons, Nikolaus Krismer
###
name: Sonarqube

on:
  pull_request:
    branches: [develop]
    paths-ignore:
      - '.github/workflows/*auto-update*'
  push:
    branches: [main, master, develop, release/**, bugfix/**, hotfix/**]
  repository_dispatch:
    types: [sonarqube]
  workflow_dispatch:

jobs:
  sonarqube:
    name: 'Job: Sonarqube'
    if: startsWith(github.actor, 'dependabot') == false && contains(github.event.pull_request.labels.*.name, 'dependencies') == false
    runs-on: [self-hosted-standard]
    concurrency:
      group: sonarqube_${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4
        if: github.event_name != 'repository_dispatch'
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Checkout git repository (for dispatched runs)
        uses: actions/checkout@v4
        if: github.event_name == 'repository_dispatch'
        with:
          fetch-depth: 0
          ref: '${{ github.event.client_payload.branch }}'

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v3
        with:
          fail: true
          files: '.github/workflow-config.env'

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/workflow-config.env'

      - name: Set env 'SHA'
        run: echo SHA="$(echo ${GITHUB_SHA} | cut -c1-7)" >> ${GITHUB_ENV}

      - name: Set env 'VERSION' to SHA (for untagged deployments)
        if: startsWith(github.ref, 'refs/tags/') == false
        run: echo VERSION="${{ env.SHA }}" >> ${GITHUB_ENV}

      - name: Set env 'TAG' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo TAG="${GITHUB_REF#refs/tags/}" >> ${GITHUB_ENV}

      - name: Set 'VERSION' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo VERSION="${TAG#v}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME'
        if: github.event_name != 'repository_dispatch'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME' (for dispatched runs)
        if: github.event_name == 'repository_dispatch'
        run: echo BRANCH_NAME="${{ github.event.client_payload.branch }}" >> ${GITHUB_ENV}

      - name: Set env 'SONAR_BASE_VERSION'
        if: startsWith(github.event_name , 'pull_request') == false
        run: echo SONAR_BASE_VERSION="${GITHUB_SHA}" >> ${GITHUB_ENV}

      - name: Set env 'SONAR_BASE_VERSION'
        if: startsWith(github.event_name , 'pull_request')
        run: echo SONAR_BASE_VERSION="${{ github.event.number }}" >> ${GITHUB_ENV}

      - name: git-get-release-action
        if: env.BRANCH_NAME == 'master'
        uses: cardinalby/git-get-release-action@v1
        id: getLatestVersion
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          doNotFailIfNotFound: true
          latest: true
          prerelease: false

      - name: Set env 'SONAR_BASE_VERSION'
        if: env.BRANCH_NAME == 'master'
        run: echo SONAR_BASE_VERSION="${{ steps.getLatestVersion.outputs.tag_name }}" >> ${GITHUB_ENV}

      - name: Get action system info
        if: env.VERBOSE_LOGGING == 'true'
        id: system-info
        uses: kenchan0130/actions-system-info@v1.2.1

      - name: Log env context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(env) }}

      - name: Log GitHub context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(github) }}

      - name: Log sonar context
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "sonar.branch.name: ${{ env.BRANCH_NAME }}"
          echo "sonar.projectName: ${{ env.COMPONENT_NAME }}"
          echo "sonar.projectVersion: ${{ env.SONAR_BASE_VERSION }}"
          echo "sonar.pullrequest.base: ${{ github.base_ref }}"
          echo "sonar.pullrequest.branch: ${{ github.head_ref }}"
          echo "sonar.pullrequest.key: ${{ github.event.number }}"
          echo "sonar.pullrequest.github.repository: ${{ github.repository }}"

      - name: Log system details
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "os: ${{ runner.os }}"
          echo "host.cpu-model: ${{ steps.system-info.outputs.cpu-model }}"
          echo "host.cpu-core: ${{ steps.system-info.outputs.cpu-core }}"
          echo "host.name: ${{ steps.system-info.outputs.hostname }}"
          echo "os.name: ${{ steps.system-info.outputs.name }}"
          echo "os.kernel.release: ${{ steps.system-info.outputs.kernel-release }}"
          echo "os.kernel.version: ${{ steps.system-info.outputs.kernel-version }}"
          echo "os.platform: ${{ steps.system-info.outputs.platform }}"
          echo "os.release: ${{ steps.system-info.outputs.release }}"

      - name: Prepare gradle properties
        run: printf "\n$GRADLE_PROPS" >> gradle.properties
        env:
          GRADLE_PROPS: ${{ secrets.GRADLE_PROPERTIES }}

      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Prepare gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Get java version from gradle
        run: echo "JAVA_VERSION=$(./gradlew -q javaVersion -Dorg.gradle.java.home=$JAVA_HOME_17_X64 | tail -n 1)" >> ${GITHUB_ENV}

      - name: Prepare java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Configure AWS credentials (to enable test to download containers)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_USER }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: aws-login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Sonarqube with gradle
        if: startsWith(github.event_name, 'pull_request') == false
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: |
            ${{ env.GRADLE_SONARQUBE_TASK }} -Pversion=${{ env.VERSION }}
              -Dsonar.host.url=${{ secrets.SONAR_URL }}
              -Dsonar.token=${{ secrets.SONAR_LOGIN }}
              -Dsonar.branch.name=${{ env.BRANCH_NAME }}
              -Dsonar.java.source=${{ env.JAVA_VERSION }}
              -Dsonar.projectVersion=${{ env.SONAR_BASE_VERSION }}
              -Dsonar.qualitygate.wait=true

      - name: Sonarqube with gradle (on PR)
        if: startsWith(github.event_name, 'pull_request')
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: |
            ${{ env.GRADLE_SONARQUBE_TASK }} -Pversion=${{ env.VERSION }}
              -Dsonar.host.url=${{ secrets.SONAR_URL }}
              -Dsonar.token=${{ secrets.SONAR_LOGIN }}
              -Dsonar.java.source=${{ env.JAVA_VERSION }}
              -Dsonar.projectVersion=${{ env.SONAR_BASE_VERSION }}
              -Dsonar.pullrequest.github.endpoint=https://api.github.com
              -Dsonar.pullrequest.github.repository=${{ github.repository }}
              -Dsonar.pullrequest.base=${{ github.base_ref }}
              -Dsonar.pullrequest.branch=${{ github.head_ref }}
              -Dsonar.pullrequest.key=${{ github.event.number }}
              -Dsonar.qualitygate.wait=true
