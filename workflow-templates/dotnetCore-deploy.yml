###
# GitHub action that builds a docker container and deploys it to AWS ECR.
#
# Prerequisites:
#  - ".github/workflow-config.env" exists
#
# Created by: Nikolaus Krismer
###
name: Build and deploy

on:
  push:
    branches: [develop]
  release:
    types: [prereleased, released]
  workflow_dispatch:

jobs:
  setup:
    name: 'Job: Setup'
    runs-on: [self-hosted-standard]
    outputs:
      branch-name: ${{ env.BRANCH_NAME }}
      component-name: ${{ env.COMPONENT_NAME }}
      is-manual-release: ${{ env.IS_MANUAL_RELEASE }}
      is-prerelease: ${{ env.IS_PRERELEASE }}
      is-release: ${{ env.IS_RELEASE }}
      my-version: ${{ env.MY_VERSION }}
      publish-as-self-contained: ${{ env.PUBLISH_AS_SELF_CONTAINED }}
      sha: ${{ env.SHA }}
      tag: ${{ env.TAG }}
      verbose: ${{ env.VERBOSE_LOGGING }}
      version: ${{ env.VERSION }}

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v3
        with:
          fail: true
          files: '.github/workflow-config.env'

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/workflow-config.env'

      - name: Set env 'COMPONENT_NAME'
        if: env.COMPONENT_NAME == 'auto'
        run: echo COMPONENT_NAME="${GITHUB_REPOSITORY#*/}" >> ${GITHUB_ENV}

      - name: Set env 'SHA'
        run: echo SHA="$(echo ${GITHUB_SHA} | cut -c1-7)" >> ${GITHUB_ENV}

      - name: Set env 'TAG' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo TAG="${GITHUB_REF#refs/tags/}" >> ${GITHUB_ENV}

      - name: Set env 'MY_VERSION' to SHA (for untagged deployments)
        if: startsWith(github.ref, 'refs/tags/') == false
        run: echo MY_VERSION="${{ env.SHA }}" >> ${GITHUB_ENV}

      - name: Set 'MY_VERSION' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo MY_VERSION="${TAG#v}" >> ${GITHUB_ENV}
          echo VERSION="${TAG#v}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Determine latest (pre-)release
        id: latest_release
        uses: InsonusK/get-latest-release@v1.1.0
        with:
          myToken: ${{ github.token }}
          view_top: 1

      - name: Set env 'IS_MANUAL_RELEASE' (a.k.a release triggered by user in GitHub - tag based)
        if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_MANUAL_RELEASE=${{ steps.latest_release.outputs.tag_name == env.TAG }} >> ${GITHUB_ENV}

      - name: Set env 'IS_PRERELEASE' (on manual release - tag based)
        if: env.IS_MANUAL_RELEASE == 'true' && startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_PRERELEASE=${{ steps.latest_release.outputs.draft == 'false' && steps.latest_release.outputs.prerelease == 'true' }} >> ${GITHUB_ENV}

      - name: Set env 'IS_RELEASE' (on manual release - tag based)
        if: env.IS_MANUAL_RELEASE == 'true' && startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_RELEASE=${{ steps.latest_release.outputs.draft == 'false' && steps.latest_release.outputs.prerelease == 'false' }} >> ${GITHUB_ENV}

      - name: Set env 'IS_MANUAL_RELEASE' (a.k.a release triggered by user in GitHub - release based)
        if: github.event_name == 'release'
        run: echo IS_MANUAL_RELEASE=true >> ${GITHUB_ENV}

      - name: Set env 'IS_PRERELEASE' (on manual release - release based)
        if: env.IS_MANUAL_RELEASE == 'true' && github.event_name == 'release'
        run: echo IS_PRERELEASE=${{ github.event.release.draft == false && github.event.release.prerelease == true }} >> ${GITHUB_ENV}

      - name: Set env 'IS_RELEASE' (on manual release - release based)
        if: env.IS_MANUAL_RELEASE == 'true' && github.event_name == 'release'
        run: echo IS_RELEASE=${{ github.event.release.draft == false && github.event.release.prerelease == false }} >> ${GITHUB_ENV}

  buildAndDeploy:
    name: 'Job: Build and deploy'
    needs: ['setup']
    runs-on: [self-hosted-standard]
    concurrency:
      group: deploy_${{ github.ref }}
      cancel-in-progress: false

    strategy:
      matrix:
        dotnet-version: ['6.0.x']
        dotnet-rid: ['win-x64']

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Get action system info
        if: needs.setup.outputs.verbose == 'true'
        id: system-info
        uses: kenchan0130/actions-system-info@v1.3.0

      - name: Log env context
        if: needs.setup.outputs.verbose == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(env) }}

      - name: Log GitHub context
        if: needs.setup.outputs.verbose == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(github) }}

      - name: Log system details
        if: needs.setup.outputs.verbose == 'true'
        run: |
          echo "os: ${{ runner.os }}"
          echo "host.cpu-model: ${{ steps.system-info.outputs.cpu-model }}"
          echo "host.cpu-core: ${{ steps.system-info.outputs.cpu-core }}"
          echo "host.name: ${{ steps.system-info.outputs.hostname }}"
          echo "os.name: ${{ steps.system-info.outputs.name }}"
          echo "os.kernel.release: ${{ steps.system-info.outputs.kernel-release }}"
          echo "os.kernel.version: ${{ steps.system-info.outputs.kernel-version }}"
          echo "os.platform: ${{ steps.system-info.outputs.platform }}"
          echo "os.release: ${{ steps.system-info.outputs.release }}"

      - name: Find Version Infos (BRANCH_TAG incl. pre-check)
        if: needs.setup.outputs.is-manual-release == 'true' && (needs.setup.outputs.is-release == 'true' || needs.setup.outputs.is-prerelease == 'true')
        run: |
          branchTag=$(git describe --tags)
          [[ "${branchTag#v}" =~ ^[0-9]+\.[0-9]+\.[0-9] ]] || exit 1
          echo BRANCH_TAG=$branchTag >> ${GITHUB_ENV}

      - name: Find Version Infos (LAST_RELEASE_TAG)
        if: needs.setup.outputs.is-manual-release == 'true' && (needs.setup.outputs.is-release == 'true' || needs.setup.outputs.is-prerelease == 'true')
        run: echo LAST_RELEASE_TAG=$(git tag -l --sort=v:refname | grep -v "${{ env.BRANCH_TAG }}" | grep -v ".*-.*" | tail -n 1) >> ${GITHUB_ENV}

      - name: Find Version Infos (BUILD_FROM_TAG)
        if: needs.setup.outputs.is-manual-release == 'true' && needs.setup.outputs.is-prerelease == 'true'
        run: echo BUILD_FROM_TAG="" >> ${GITHUB_ENV}

      - name: Find Version Infos (BUILD_FROM_TAG)
        if: needs.setup.outputs.is-manual-release == 'true' && needs.setup.outputs.is-release == 'true'
        run: echo BUILD_FROM_TAG=${{ env.LAST_RELEASE_TAG }} >> ${GITHUB_ENV}

      - name: Build changelog on manual release
        if: needs.setup.outputs.is-manual-release == 'true' && (needs.setup.outputs.is-release == 'true' || needs.setup.outputs.is-prerelease == 'true')
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          configurationJson: |
            { "pr_template": "- #{{TITLE}} (by @#{{AUTHOR}} in ##{{NUMBER}})",
              "categories": [
                {
                  "title": "## üöÄ Features",
                  "labels": [
                    "feat",
                    "feature"
                  ]
                },
                {
                  "title": "## üêõ Fixes",
                  "labels": [
                    "fix",
                    "hotfix",
                    "bug"
                  ]
                },
                {
                  "title": "## üõ†Ô∏è Chores",
                  "labels": [
                    "chore"
                  ]
                },
                {
                  "title": "## üõ†Ô∏è Dependencies",
                  "labels": [
                    "deps",
                    "dep"
                  ]
                },
                {
                  "title": "## üåÄ Miscellaneous",
                  "labels": []
                }
              ],
              "label_extractor": [
                {
                  "method": "match",
                  "pattern": "^([\\w\\-]+)",
                  "target": "$1",
                  "on_property": "branch"
                }
              ]
            }
          outputFile: release_changelog.md
          fromTag: ${{ env.BUILD_FROM_TAG }}
          toTag: ${{ env.BRANCH_TAG }}

      - name: Check release changelog existence
        id: check_release_changelog
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: 'release_changelog.md'

      - name: Enhance changelog
        if: steps.check_release_changelog.outputs.files_exists == 'true'
        run: sed -i "s/DD-\([0-9]*\)/[DD-\1](https:\/\/innio.atlassian.net\/browse\/DD-\1)/g" release_changelog.md

      - name: Update Release
        if: steps.check_release_changelog.outputs.files_exists == 'true'
        uses: tubone24/update_release@v1.3.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.setup.outputs.tag }}
        with:
          body_path: release_changelog.md

      - name: Prepare dotnet environment
        uses: actions/setup-dotnet@v4
        env:
          DOTNET_INSTALL_DIR: './.dotnet'
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Install dependencies
        run: dotnet restore -r ${{ matrix.dotnet-rid }}

      - name: Publish application
        run: |
          dotnet publish "${{ needs.setup.outputs.component-name }}/${{ needs.setup.outputs.component-name }}.csproj" \
            --no-restore \
            -c Release \
            -r ${{ matrix.dotnet-rid }} \
            -p:PublishSingleFile=true \
            --self-contained ${{ needs.setup.outputs.publish-as-self-contained }} \
            -o "build/${{ needs.setup.outputs.my-version }}_${{ matrix.dotnet-version }}_${{ matrix.dotnet-rid }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: Release (${{ matrix.dotnet-version }} - ${{ matrix.dotnet-rid }})
          path: 'build/${{ needs.setup.outputs.my-version }}_${{ matrix.dotnet-version }}_${{ matrix.dotnet-rid }}/'

      - name: Create release artifact archive
        if: needs.setup.outputs.is-release == 'true'
        uses: vimtor/action-zip@v1
        with:
          files: 'build/${{ needs.setup.outputs.my-version }}_${{ matrix.dotnet-rid }}_${{ matrix.dotnet-rid }}/*'
          dest: '${{ needs.setup.outputs.component-name }}_${{ needs.setup.outputs.my-version }}_${{ matrix.dotnet-version }}_${{ matrix.dotnet-rid }}.zip'

      - name: Upload release artifact (as assets)
        if: needs.setup.outputs.is-release == 'true' || needs.setup.outputs.is-prerelease == 'true'
        uses: AButler/upload-release-assets@v3.0
        with:
          files: '${{ needs.setup.outputs.component-name }}_${{ needs.setup.outputs.my-version }}_${{ matrix.dotnet-version }}_${{ matrix.dotnet-rid }}.zip'
          TAG_NAME: ${{ needs.setup.outputs.tag }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  releaseMerging:
    name: 'Job: Merging release changes'
    if: always() && needs.setup.outputs.is-release == 'true'
    needs: ['setup', 'build', 'deployLegacy', 'deployHelm']
    runs-on: [self-hosted-standard]

    steps:
      - name: Merging release changes to master
        if: github.event.release.target_commitish != 'develop'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.CI_PAT }}
          event-type: merge
          client-payload: '{
            "commitish": "${{ github.event.release.target_commitish }}",
            "source_branch": "${{ needs.setup.outputs.branch-name }}",
            "target_branch": "master",
            "tag": "${{ needs.setup.outputs.tag }}"}'

      # target_commitish can be "develop" for releases that are solely based on tags
      - name: Merging release changes to master (not using develop commitish, but tag ref)
        if: github.event.release.target_commitish == 'develop'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.CI_PAT }}
          event-type: merge
          client-payload: '{
            "source_branch": "${{ needs.setup.outputs.branch-name }}",
            "target_branch": "master",
            "tag": "${{ needs.setup.outputs.tag }}"}'
