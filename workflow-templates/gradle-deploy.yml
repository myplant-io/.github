###
# GitHub action that builds a docker container and deploys it to AWS ECR.
#
# Prerequisites:
#  - ".github/workflow-config.env" exists
#  - myplant-io/gradle-plugins >=3.7.1
#
# Created by: Daniel Hons, Nikolaus Krismer
###
name: Build and deploy

on:
  push:
    branches: [develop]
  release:
    types: [prereleased, released]
  workflow_dispatch:

jobs:
  buildAndDeploy:
    name: 'Job: Build and deploy'
    runs-on: [self-hosted-standard]
    concurrency:
      group: deploy_${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_READONLY_PAT }}

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v3
        with:
          fail: true
          files: '.github/workflow-config.env'

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/workflow-config.env'

      - name: Check setting file existence
        id: check_settings_file
        if: env.COMPONENT_NAME == 'auto'
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: 'settings.gradle'

      - name: Set env 'COMPONENT_NAME' (settings are present)
        if: env.COMPONENT_NAME == 'auto' && steps.check_settings_file.outputs.files_exists == 'true'
        run: echo COMPONENT_NAME="$(grep 'rootProject.name' settings.gradle | cut -d '=' -f 2 | tr -d '\r' | sed 's|[\"'\'\\t' ]||g')" >> ${GITHUB_ENV}

      - name: Set env 'COMPONENT_NAME' (no settings found)
        if: env.COMPONENT_NAME == 'auto' && steps.check_settings_file.outputs.files_exists == 'false'
        run: echo COMPONENT_NAME="${GITHUB_REPOSITORY#*/}" >> ${GITHUB_ENV}

      - name: Set env 'DOCKER_REPOSITORY'
        if: env.DOCKER_REPOSITORY == 'auto'
        run: echo DOCKER_REPOSITORY=$(echo ${GITHUB_REPOSITORY} | sed 's:.*/::') >> ${GITHUB_ENV}

      - name: Set env 'DOCKER_REPOSITORY' (fallback to default)
        if: env.DOCKER_REPOSITORY == ''
        run: echo DOCKER_REPOSITORY='myplant-io' >> ${GITHUB_ENV}

      - name: Set env 'DOCKER_TAG_PREFIX'
        if: env.DOCKER_TAG_PREFIX == 'auto'
        run: echo DOCKER_TAG_PREFIX="${COMPONENT_NAME}_" >> ${GITHUB_ENV}

      - name: Set env 'SHA'
        run: echo SHA="$(echo ${GITHUB_SHA} | cut -c1-7)" >> ${GITHUB_ENV}

      - name: Set env 'TAG' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo TAG="${GITHUB_REF#refs/tags/}" >> ${GITHUB_ENV}

      - name: Set env 'VERSION' to SHA (for untagged deployments)
        if: startsWith(github.ref, 'refs/tags/') == false
        run: echo VERSION="${{ env.SHA }}" >> ${GITHUB_ENV}

      - name: Set 'VERSION' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo VERSION="${TAG#v}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Determine latest (pre-)release
        id: latest_release
        uses: InsonusK/get-latest-release@v1.1.0
        with:
          myToken: ${{ github.token }}
          view_top: 1

      - name: Set env 'IS_MANUAL_RELEASE' (a.k.a release triggered by user in GitHub - tag based)
        if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_MANUAL_RELEASE=${{ steps.latest_release.outputs.tag_name == env.TAG }} >> ${GITHUB_ENV}

      - name: Set env 'IS_PRERELEASE' (on manual release - tag based)
        if: env.IS_MANUAL_RELEASE == 'true' && startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_PRERELEASE=${{ steps.latest_release.outputs.draft == 'false' && steps.latest_release.outputs.prerelease == 'true' }} >> ${GITHUB_ENV}

      - name: Set env 'IS_RELEASE' (on manual release - tag based)
        if: env.IS_MANUAL_RELEASE == 'true' && startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_RELEASE=${{ steps.latest_release.outputs.draft == 'false' && steps.latest_release.outputs.prerelease == 'false' }} >> ${GITHUB_ENV}

      - name: Set env 'IS_MANUAL_RELEASE' (a.k.a release triggered by user in GitHub - release based)
        if: github.event_name == 'release'
        run: echo IS_MANUAL_RELEASE=true >> ${GITHUB_ENV}

      - name: Set env 'IS_PRERELEASE' (on manual release - release based)
        if: env.IS_MANUAL_RELEASE == 'true' && github.event_name == 'release'
        run: echo IS_PRERELEASE=${{ github.event.release.draft == false && github.event.release.prerelease == true }} >> ${GITHUB_ENV}

      - name: Set env 'IS_RELEASE' (on manual release - release based)
        if: env.IS_MANUAL_RELEASE == 'true' && github.event_name == 'release'
        run: echo IS_RELEASE=${{ github.event.release.draft == false && github.event.release.prerelease == false }} >> ${GITHUB_ENV}

      - name: Initialize 'DEPLOY_TARGETS'
        run: echo DEPLOY_TARGETS=none >> ${GITHUB_ENV}

      - name: Initialize 'RETAG'
        run: echo RETAG=false >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' for push (to alpha/staging)
        if: env.BRANCH_NAME == 'develop' && env.PUSH_DEPLOY_TARGET != 'none'
        run: echo DEPLOY_TARGETS=$(echo ${PUSH_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' pre-release
        if: env.IS_PRERELEASE == 'true' && env.PRE_RELEASE_DEPLOY_TARGET != 'none'
        run: echo DEPLOY_TARGETS=$(echo ${PRE_RELEASE_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' for release
        if: env.IS_RELEASE == 'true' &&  env.RELEASE_DEPLOY_TARGET != 'none'
        run: echo DEPLOY_TARGETS=$(echo ${RELEASE_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' for master branch (only run build task; never deploy)
        if: env.BRANCH_NAME == 'master'
        run: echo DEPLOY_TARGETS="none" >> ${GITHUB_ENV}

      - name: Get action system info
        if: env.VERBOSE_LOGGING == 'true'
        id: system-info
        uses: kenchan0130/actions-system-info@v1.3.0

      - name: Log env context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(env) }}

      - name: Log GitHub context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(github) }}

      - name: Log system details
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "os: ${{ runner.os }}"
          echo "host.cpu-model: ${{ steps.system-info.outputs.cpu-model }}"
          echo "host.cpu-core: ${{ steps.system-info.outputs.cpu-core }}"
          echo "host.name: ${{ steps.system-info.outputs.hostname }}"
          echo "os.name: ${{ steps.system-info.outputs.name }}"
          echo "os.kernel.release: ${{ steps.system-info.outputs.kernel-release }}"
          echo "os.kernel.version: ${{ steps.system-info.outputs.kernel-version }}"
          echo "os.platform: ${{ steps.system-info.outputs.platform }}"
          echo "os.release: ${{ steps.system-info.outputs.release }}"

      - name: Find Version Infos (BRANCH_TAG incl. pre-check)
        if: env.IS_MANUAL_RELEASE == 'true' && (env.IS_RELEASE == 'true' || env.IS_PRERELEASE == 'true')
        run: |
          branchTag=$(git describe --tags)
          [[ "${branchTag#v}" =~ ^[0-9]+\.[0-9]+\.[0-9] ]] || exit 1
          echo BRANCH_TAG=$branchTag >> ${GITHUB_ENV}

      - name: Find Version Infos (LAST_RELEASE_TAG)
        if: env.IS_MANUAL_RELEASE == 'true' && (env.IS_RELEASE == 'true' || env.IS_PRERELEASE == 'true')
        run: echo LAST_RELEASE_TAG=$(git tag -l --sort=v:refname | grep -v "${{ env.BRANCH_TAG }}" | grep -v ".*-.*" | tail -n 1) >> ${GITHUB_ENV}

      - name: Find Version Infos (BUILD_FROM_TAG)
        if: env.IS_MANUAL_RELEASE == 'true' && env.IS_PRERELEASE == 'true'
        run: echo BUILD_FROM_TAG="" >> ${GITHUB_ENV}

      - name: Find Version Infos (BUID_FROM_TAG)
        if: env.IS_MANUAL_RELEASE == 'true' && env.IS_RELEASE == 'true'
        run: echo BUILD_FROM_TAG=${{ env.LAST_RELEASE_TAG }} >> ${GITHUB_ENV}

      - name: Build changelog on manual release
        if: env.IS_MANUAL_RELEASE == 'true' && (env.IS_RELEASE == 'true' || env.IS_PRERELEASE == 'true')
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          configurationJson: |
            { "pr_template": "- #{{TITLE}} (by @#{{AUTHOR}} in ##{{NUMBER}})",
              "categories": [
                {
                  "title": "## üöÄ Features",
                  "labels": [
                    "feat",
                    "feature"
                  ]
                },
                {
                  "title": "## üêõ Fixes",
                  "labels": [
                    "fix",
                    "hotfix",
                    "bug"
                  ]
                },
                {
                  "title": "## üõ†Ô∏è Chores",
                  "labels": [
                    "chore"
                  ]
                },
                {
                  "title": "## üõ†Ô∏è Dependencies",
                  "labels": [
                    "deps",
                    "dep"
                  ]
                },
                {
                  "title": "## üåÄ Miscellaneous",
                  "labels": []
                }
              ],
              "label_extractor": [
                {
                  "method": "match",
                  "pattern": "^([\\w\\-]+)",
                  "target": "$1",
                  "on_property": "branch"
                }
              ]
            }
          outputFile: release_changelog.md
          fromTag: ${{ env.BUILD_FROM_TAG }}
          toTag: ${{ env.BRANCH_TAG }}

      - name: Check release changelog existence
        id: check_release_changelog
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: 'release_changelog.md'

      - name: Enhance changelog
        if: steps.check_release_changelog.outputs.files_exists == 'true'
        run: sed -i "s/DD-\([0-9]*\)/[DD-\1](https:\/\/innio.atlassian.net\/browse\/DD-\1)/g" release_changelog.md

      - name: Update Release
        if: steps.check_release_changelog.outputs.files_exists == 'true'
        uses: tubone24/update_release@v1.3.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ env.TAG }}
        with:
          body_path: release_changelog.md

      - name: Find last version (default)
        run: echo LAST_VERSION="" >> ${GITHUB_ENV}

      - name: Find last version
        if: env.IS_MANUAL_RELEASE == 'true' && (env.IS_RELEASE == 'true' || env.IS_PRERELEASE == 'true') && env.LAST_RELEASE_TAG != ''
        run: |
          lastTag=$(git tag -l --sort=v:refname | grep -vx "${{ env.BRANCH_TAG }}" | tail -n 1)
          echo LAST_VERSION=${lastTag#v} >> ${GITHUB_ENV}

      - name: Check Re-Tag docker image
        if: env.IS_MANUAL_RELEASE == 'true' && env.IS_RELEASE == 'true' && env.LAST_VERSION != ''
        env:
          releaseTag: ${{ env.VERSION }}
          preReleaseTag: ${{ env.LAST_VERSION }}
        run: |
          echo "Check if tags are on same rev"
          prevSHA=$(git rev-list -n 1 refs/tags/v$preReleaseTag)
          curSHA=$(git rev-list -n 1 refs/tags/v$releaseTag)

          if [ $prevSHA == $curSHA ]; then
            echo "Adding release tag $releaseTag to image with pre-relase tag $preReleaseTag"
            echo RETAG=true >> ${GITHUB_ENV}
          fi;

      - name: Prepare gradle properties
        run: printf "\n$GRADLE_PROPS" >> gradle.properties
        env:
          GRADLE_PROPS: ${{ secrets.GRADLE_PROPERTIES }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Prepare gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Get java version from gradle
        run: echo "JAVA_VERSION=$(./gradlew -q javaVersion -Dorg.gradle.java.home=$JAVA_HOME_17_X64 | tail -n 1)" >> ${GITHUB_ENV}

      - name: Prepare java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_USER }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: aws-login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Retag docker image
        id: check-docker-registry-retag
        if: env.IS_MANUAL_RELEASE == 'true' && env.IS_RELEASE == 'true' && env.RETAG == 'true'
        uses: myplant-io/github-actions/check-docker-registry@v1
        with:
          imagePrefix: ${{ env.DOCKER_TAG_PREFIX }}
          repository: ${{ env.DOCKER_REPOSITORY }}
          sha: ${{ env.LAST_VERSION }}
          version: ${{ env.VERSION }}

      - name: Check docker registry
        id: check-docker-registry
        if: env.DEPLOY_TARGETS != 'none' && env.GRADLE_DEPLOY_TASK != 'none'
        uses: myplant-io/github-actions/check-docker-registry@v1
        with:
          imagePrefix: ${{ env.DOCKER_TAG_PREFIX }}
          repository: ${{ env.DOCKER_REPOSITORY }}
          sha: ${{ env.SHA }}
          version: ${{ env.VERSION }}

      - name: Build with gradle (incl. test)
        if: (env.RETAG == 'false' && steps.check-docker-registry.outputs.imageExists == 'false') || env.GRADLE_DEPLOY_TASK == 'none'
        run: ./gradlew ${{ env.GRADLE_BUILD_TASK }} -Pversion=${{ env.VERSION }}

      - name: Determine number of gradle (sub)projects
        id: gradle-project-stats
        if: failure()
        run: echo subproject-count="$(./gradlew tasks --all | grep ':assemble' | cut -d ':' -f 1 | wc -l)" >> ${GITHUB_OUTPUT}

      - name: Compress and upload test report folders
        if: failure() && steps.gradle-project-stats.outputs.subproject-count == '0'
        uses: actions/upload-artifact@v4
        with:
          name: test-result
          path: 'build/reports/tests'

      - name: Compress test report folders (for multirepo)
        if: failure() && steps.gradle-project-stats.outputs.subproject-count != '0'
        run: |
          folders=$(./gradlew tasks --all | grep ':assemble' | cut -d ':' -f 1 | sort -u | sed 's#$#/build/reports/tests#' | xargs)
          zip -qq -r test-results.zip $(echo ${folders})

      - name: Upload test results (for multirepo)
        if: failure() && steps.gradle-project-stats.outputs.subproject-count != '0'
        uses: actions/upload-artifact@v4
        with:
          name: test-result
          path: test-results.zip

      - name: Build and push docker image
        if: (env.RETAG == 'false' && steps.check-docker-registry.outputs.imageExists == 'false') && env.GRADLE_DEPLOY_TASK != 'none'
        run: ./gradlew ${{ env.GRADLE_DEPLOY_TASK }}
          -Pversion=${{ env.VERSION }}
          -DrepositoryName=${{ env.DOCKER_REPOSITORY }}

      - name: Deploy Service
        if: env.DEPLOY_TARGETS != 'none' && env.GRADLE_DEPLOY_TASK != 'none'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.CI_PAT }}
          repository: myplant-io/ci-deploy-action
          event-type: deploy
          client-payload: '{
            "deployment_repo": "${{ env.DEPLOYMENT_REPO }}",
            "docker_repository": "${{ env.DOCKER_REPOSITORY }}",
            "docker_tag_prefix": "${{ env.DOCKER_TAG_PREFIX }}",
            "version": "${{ env.VERSION }}",
            "component_name": "${{ env.COMPONENT_NAME }}",
            "deployment_files": ${{ env.DEPLOY_TARGETS }},
            "git_sha": "${{ env.SHA }}"}'

      - name: Publish artifacts to nexus repo
        if: env.GRADLE_PUBLISH_TASK != 'none' && (env.GRADLE_PUBLISH_SHA == 'true' || startsWith(github.ref, 'refs/tags/'))
        run: ./gradlew ${{ env.GRADLE_PUBLISH_TASK }} -Pversion=${{ env.VERSION }}

      - name: Merging release changes to master
        if: env.IS_RELEASE == 'true' && github.event.release.target_commitish != 'develop'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.CI_PAT }}
          event-type: merge
          client-payload: '{
            "commitish": "${{ github.event.release.target_commitish }}",
            "source_branch": "${{ env.BRANCH_NAME }}",
            "target_branch": "master",
            "tag": "${{ env.TAG }}"}'

      # target_commitish can be "develop" for releases that are solely based on tags
      - name: Merging release changes to master (not using develop commitish, but tag ref)
        if: env.IS_RELEASE == 'true' && github.event.release.target_commitish == 'develop'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.CI_PAT }}
          event-type: merge
          client-payload: '{
            "source_branch": "${{ env.BRANCH_NAME }}",
            "target_branch": "master",
            "tag": "${{ env.TAG }}"}'
