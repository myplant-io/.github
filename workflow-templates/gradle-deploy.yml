name: Build and deploy

on:
  push:
    branches: [develop, release/**, hotfix/**]
  release:
    types: [published]
  repository_dispatch:
    types: [autoRelease]
  workflow_dispatch:

env:
  COMPONENT_NAME: auto
  DEPLOYMENT_REPO: "myplant-io/deployment"
  DOCKER_TAG_PREFIX: auto
  GRADLE_BUILD_TASK: "build test"
  # GRADLE_DEPLOY_TASK: none
  GRADLE_DEPLOY_TASK: "dockerPushAndDeleteLocal -x test"
  GRADLE_PUBLISH_TASK: none
  # GRADLE_PUBLISH_TASK: "publish -x test"
  PUSH_DEPLOY_TARGET: '["alpha-io/web-services/${COMPONENT_NAME}.yaml"]'
  PRE_RELEASE_DEPLOY_TARGET: '["beta-io/web-services/${COMPONENT_NAME}.yaml"]'
  RELEASE_DEPLOY_TARGET: '["production-io/web-services/${COMPONENT_NAME}.yaml"]'
  REPORT_DIR: auto

jobs:
  buildAndDeploy:
    name: "Job: Build and deploy"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java-version: [11]

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v2
        if: github.event_name != 'repository_dispatch'
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Checkout git repository (for dispatched runs)
        uses: actions/checkout@v2
        if: github.event_name == 'repository_dispatch'
        with:
          fetch-depth: 0
          ref: "refs/tags/${{ github.event.client_payload.tag }}"

      - name: Checkout github actions repository
        uses: actions/checkout@v2
        with:
          repository: myplant-io/github-actions
          ref: v0.4.0
          token: ${{ secrets.CI_PAT }}
          path: .github/actions

      - name: Check setting file existence
        id: check_settings_file
        if: env.COMPONENT_NAME == 'auto'
        uses: andstor/file-existence-action@v1
        with:
          allow_failure: true
          files: ./settings.gradle

      - name: Set env 'COMPONENT_NAME' (settings are present)
        if: env.COMPONENT_NAME == 'auto' && steps.check_settings_file.outputs.files_exists == 'true'
        run: echo COMPONENT_NAME="$(grep 'rootProject.name' settings.gradle | cut -d '=' -f 2 | tr -d '\r' | sed 's|[\"'\'\\t' ]||g')" >> ${GITHUB_ENV}

      - name: Set env 'COMPONENT_NAME' (no settings found)
        if: env.COMPONENT_NAME == 'auto' && steps.check_settings_file.outputs.files_exists == 'false'
        run: echo COMPONENT_NAME="${GITHUB_REPOSITORY#*/}" >> ${GITHUB_ENV}

      - name: Set env 'REPORT_DIR'
        if: env.REPORT_DIR == 'auto'
        run: echo REPORT_DIR="build/reports/tests" >> ${GITHUB_ENV}

      - name: Set env 'DOCKER_TAG_PREFIX'
        if: env.DOCKER_TAG_PREFIX == 'auto'
        run: echo DOCKER_TAG_PREFIX="${COMPONENT_NAME}_" >> ${GITHUB_ENV}

      - name: Set env 'SHA'
        run: echo SHA="$(echo ${GITHUB_SHA} | cut -c1-7)" >> ${GITHUB_ENV}

      - name: Set env 'SHA' (for dispatched runs)
        if: github.event_name == 'repository_dispatch'
        run: echo SHA="${{ github.event.client_payload.sha }}" >> ${GITHUB_ENV}

      - name: Set env 'TAG' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo TAG="${GITHUB_REF/refs\/tags\//}" >> ${GITHUB_ENV}

      - name: Set env 'TAG' (for dispatched runs)
        if: github.event_name == 'repository_dispatch'
        run: echo TAG="${{ github.event.client_payload.tag }}" >> ${GITHUB_ENV}

      - name: Set env 'VERSION' to SHA (for untagged deployments)
        if: startsWith(github.ref, 'refs/tags/') == false
        run: echo VERSION="${{ env.SHA }}" >> ${GITHUB_ENV}

      - name: Set 'VERSION' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'repository_dispatch'
        run: echo VERSION="${TAG#v}" >> ${GITHUB_ENV}

      - name: Initialize 'DEPLOY_TARGETS'
        run: echo DEPLOY_TARGETS=none >> $GITHUB_ENV

      - name: Set env 'DEPLOY_TARGETS' for push (to alpha/staging)
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop' && env.PUSH_DEPLOY_TARGET != 'none'
        run: echo DEPLOY_TARGETS=$(echo ${PUSH_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' for pre-release
        if: github.event_name == 'release' && github.event.release.prerelease && env.PRE_RELEASE_DEPLOY_TARGET != 'none'
        run: echo DEPLOY_TARGETS=$(echo ${PRE_RELEASE_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' dispatched pre-release
        if: github.event_name == 'repository_dispatch' && github.event.client_payload.release != true && env.PRE_RELEASE_DEPLOY_TARGET != 'none'
        run: echo DEPLOY_TARGETS=$(echo ${PRE_RELEASE_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' for release
        if: github.event_name == 'release' && !github.event.release.prerelease && env.RELEASE_DEPLOY_TARGET != 'none'
        run: echo DEPLOY_TARGETS=$(echo ${RELEASE_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' dispatched release
        if: github.event_name == 'repository_dispatch' && github.event.client_payload.release == true && env.RELEASE_DEPLOY_TARGET != 'none'
        run: echo DEPLOY_TARGETS=$(echo ${RELEASE_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' for master branch (only run build task; never deploy)
        if: github.ref == 'refs/heads/master'
        run: echo DEPLOY_TARGETS="none" >> ${GITHUB_ENV}

      - name: Log details
        run: |
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "RELEASE INFO: ${{ join(github.event.release, '\n') }}"
          echo "COMPONENT_NAME: ${{ env.COMPONENT_NAME }}"
          echo "DEPLOYMENT_REPO: ${{ env.DEPLOYMENT_REPO }}"
          echo "REPORT_DIR: ${{ env.REPORT_DIR }}"
          echo "DEPLOY_TARGETS: ${{ env.DEPLOY_TARGETS }}"
          echo "DOCKER_TAG_PREFIX: ${{ env.DOCKER_TAG_PREFIX }}"
          echo "TAG: ${{ env.TAG }}"
          echo "VERSION: ${{ env.VERSION }}"

      - name: Prepare gradle properties
        run: printf "\n$GRADLE_PROPS" >> gradle.properties
        env:
          GRADLE_PROPS: ${{ secrets.GRADLE_PROPERTIES }}

      - name: Prepare java ${{ matrix.java-version }}
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: ${{ matrix.java-version }}

      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with gradle (incl. test and sonar)
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: ${{ env.GRADLE_BUILD_TASK }} -Pversion=${{ env.VERSION }}

      - name: Upload test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-result
          path: ${{ env.REPORT_DIR }}

      - name: Configure AWS credentials
        if: env.GRADLE_DEPLOY_TASK != 'none'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_USER }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET }}
          aws-region: us-east-1

      - name: Check docker registry
        id: check-docker-registry
        if: env.GRADLE_DEPLOY_TASK != 'none'
        uses: ./.github/actions/check-docker-registry
        with:
          imagePrefix: ${{ env.DOCKER_TAG_PREFIX }}
          version: ${{ env.VERSION }}
          sha: ${{ env.SHA }}

      - name: Build and push docker image
        if: steps.check-docker-registry.outputs.imageExists == 'false' && env.GRADLE_DEPLOY_TASK != 'none'
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: ${{ env.GRADLE_DEPLOY_TASK }} -Pversion=${{ env.VERSION }}

      - name: Deploy Service
        if: env.DEPLOY_TARGETS != 'none' && env.GRADLE_DEPLOY_TASK != 'none'
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.CI_PAT }}
          repository: myplant-io/ci-deploy-action
          event-type: deploy
          client-payload: '{
            "deployment_repo": "${{ env.DEPLOYMENT_REPO }}",
            "docker_tag_prefix": "${{ env.DOCKER_TAG_PREFIX }}",
            "version": "${{ env.VERSION }}",
            "component_name": "${{ env.COMPONENT_NAME }}",
            "deployment_files": ${{ env.DEPLOY_TARGETS }},
            "git_sha": "${{ env.SHA }}"
          }'

      - name: Publish artifacts to nexus repo
        if: startsWith(github.ref, 'refs/tags/') && env.GRADLE_PUBLISH_TASK != 'none'
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: ${{ env.GRADLE_PUBLISH_TASK }} -Pversion=${{ env.VERSION }}

      - name: Merging release changes to master
        if: github.event_name == 'release' && !github.event.release.prerelease
        uses: ./.github/actions/merge-branch
