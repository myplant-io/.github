###
# GitHub action that analyzes the code with the sonarqube scanner and pushes
# the result to the myplant sonarqube (sonar-dev.myplant-io).
#
# Prerequisites:
#  - ".github/workflow-config.env" exists
#
# Created by: Daniel Hons, Nikolaus Krismer
###
name: Sonarqube

on:
  pull_request:
    branches: [develop]
    paths-ignore:
      - '.github/workflows/*auto-update*'
  push:
    branches: [main, master, develop, release/**, bugfix/**, hotfix/**]
  repository_dispatch:
    types: [sonarqube]
  workflow_dispatch:

jobs:
  setup:
    name: 'Job: Python setup'
    runs-on: [self-hosted-standard]
    outputs:
      pythonVersionFile: ${{steps.set_outputs.outputs.pythonVersionFile}}

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: .

      - name: Check python version determination (pyproject.toml)
        id: check_file_pyproject
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: 'pyproject.toml'

      - name: Use pyproject.toml as python version file
        if: steps.check_file_pyproject.outputs.files_exists == 'true'
        run: echo PYTHON_VERSION_FILE="pyproject.toml" >> ${GITHUB_ENV}

      - name: Check python version determination (.python-version)
        if: steps.check_file_pyproject.outputs.files_exists == 'false'
        id: check_file_python_version
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: '.python-version'

      - name: Use .python-version as python version file
        if: steps.check_file_python_version.outputs.files_exists == 'true'
        run: echo PYTHON_VERSION_FILE=".python-version" >> ${GITHUB_ENV}

      - name: Check python version determination
        if: steps.check_file_pyproject.outputs.files_exists == 'false' &&  steps.check_file_python_version.outputs.files_exists == 'false'
        run: |
          echo "::error Either pyproject.toml or .python-version must exists (and contain a python version number)"
          exit 1

      - id: set_outputs
        name: Set python version file
        run: echo pythonVersionFile="${{ env.PYTHON_VERSION_FILE}}" >> ${GITHUB_OUTPUT}

  sonarqube:
    name: 'Job: Sonarqube'
    needs: ['setup']
    if: startsWith(github.actor, 'dependabot') == false && contains(github.event.pull_request.labels.*.name, 'dependencies') == false
    runs-on: [self-hosted-standard]
    concurrency:
      group: sonarqube_${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4
        if: github.event_name != 'repository_dispatch'
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Checkout git repository (for dispatched runs)
        uses: actions/checkout@v4
        if: github.event_name == 'repository_dispatch'
        with:
          fetch-depth: 0
          ref: '${{ github.event.client_payload.branch }}'

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v3
        with:
          fail: true
          files: '.github/workflow-config.env'

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/workflow-config.env'

      - name: Set env 'COMPONENT_NAME'
        if: env.COMPONENT_NAME == 'auto'
        run: echo COMPONENT_NAME="${GITHUB_REPOSITORY#*/}" >> ${GITHUB_ENV}

      - name: Set env SONAR_KEY
        run: echo SONAR_KEY="${{ env.COMPONENT_NAME }}" >> ${GITHUB_ENV}

      - name: Default SONAR_PREFIX to io.myplant
        if: env.SONAR_PREFIX == ''
        run: echo SONAR_PREFIX="io.myplant" >> ${GITHUB_ENV}

      - name: Apply SONAR_PREFIX to SONAR_KEY
        if: env.SONAR_PREFIX != ''
        run: echo SONAR_KEY="${{ env.SONAR_PREFIX }}:${{ env.SONAR_KEY }}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME'
        if: github.event_name != 'repository_dispatch'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME' (for dispatched runs)
        if: github.event_name == 'repository_dispatch'
        run: echo BRANCH_NAME="${{ github.event.client_payload.branch }}" >> ${GITHUB_ENV}

      - name: Set env 'SONAR_BASE_VERSION'
        if: startsWith(github.event_name , 'pull_request') == false
        run: echo SONAR_BASE_VERSION="${GITHUB_SHA}" >> ${GITHUB_ENV}

      - name: Set env 'SONAR_BASE_VERSION'
        if: startsWith(github.event_name , 'pull_request')
        run: echo SONAR_BASE_VERSION="${{ github.event.number }}" >> ${GITHUB_ENV}

      - name: git-get-release-action
        if: env.BRANCH_NAME == 'master'
        uses: cardinalby/git-get-release-action@v1
        id: getLatestVersion
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          doNotFailIfNotFound: true
          latest: true
          prerelease: false

      - name: Set env 'SONAR_BASE_VERSION'
        if: env.BRANCH_NAME == 'master'
        run: echo SONAR_BASE_VERSION="${{ steps.getLatestVersion.outputs.tag_name }}" >> ${GITHUB_ENV}

      - name: Get action system info
        if: env.VERBOSE_LOGGING == 'true'
        id: system-info
        uses: kenchan0130/actions-system-info@v1.3.0

      - name: Log env context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(env) }}

      - name: Log GitHub context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(github) }}

      - name: Log sonar context
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "sonar.branch.name: ${{ env.BRANCH_NAME }}"
          echo "sonar.projectKey: ${{ env.SONAR_KEY }}"
          echo "sonar.projectName: ${{ env.COMPONENT_NAME }}"
          echo "sonar.projectVersion: ${{ env.SONAR_BASE_VERSION }}"
          echo "sonar.pullrequest.base: ${{ github.base_ref }}"
          echo "sonar.pullrequest.branch: ${{ github.head_ref }}"
          echo "sonar.pullrequest.key: ${{ github.event.number }}"
          echo "sonar.pullrequest.github.repository: ${{ github.repository }}"

      - name: Log system details
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "os: ${{ runner.os }}"
          echo "host.cpu-model: ${{ steps.system-info.outputs.cpu-model }}"
          echo "host.cpu-core: ${{ steps.system-info.outputs.cpu-core }}"
          echo "host.name: ${{ steps.system-info.outputs.hostname }}"
          echo "os.name: ${{ steps.system-info.outputs.name }}"
          echo "os.kernel.release: ${{ steps.system-info.outputs.kernel-release }}"
          echo "os.kernel.version: ${{ steps.system-info.outputs.kernel-version }}"
          echo "os.platform: ${{ steps.system-info.outputs.platform }}"
          echo "os.release: ${{ steps.system-info.outputs.release }}"

      - name: Check poetry file existence
        id: check_poetry
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: 'poetry.lock'

      - name: Prepare poetry
        if: steps.check_poetry.outputs.files_exists == 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        if: steps.check_poetry.outputs.files_exists == 'true'
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Prepare python (with pip)
        if: steps.check_poetry.outputs.files_exists == 'false'
        uses: actions/setup-python@v5
        with:
          cache: 'pip'
          python-version-file: ${{ needs.setup.outputs.pythonVersionFile }}

      - name: Prepare python (with poetry)
        if: steps.check_poetry.outputs.files_exists == 'true'
        uses: actions/setup-python@v5
        with:
          cache: 'poetry'
          python-version-file: ${{ needs.setup.outputs.pythonVersionFile }}

      - name: Configure poetry
        if: steps.check_poetry.outputs.files_exists == 'true'
        run: |
          poetry config repositories.myplant_nexus https://nexus-dev.myplant.io/repository/myplantpy/simple
          poetry config repositories.myplant_nexus_external https://nexus-dev.myplant.io/repository/myplantpyexternal/simple
          poetry config http-basic.myplant_nexus myplant-publisher ${{secrets.NEXUS_MYPLANT_PUBLISHER}}
          poetry config http-basic.myplant_nexus_external myplant-publisher ${{secrets.NEXUS_MYPLANT_PUBLISHER}}

      - name: Install dependencies (including pytest; with pip)
        if: steps.check_poetry.outputs.files_exists == 'false'
        run: |
          pip install -r requirements.txt \
               --index-url "https://myplant-publisher:${{secrets.NEXUS_MYPLANT_PUBLISHER}}@nexus-dev.myplant.io/repository/myplantpy/simple" \
               --extra-index-url "https://myplant-publisher:${{secrets.NEXUS_MYPLANT_PUBLISHER}}@nexus-dev.myplant.io/repository/myplantpyexternal/simple" \
               --extra-index-url "https://pypi.org/simple"
          pip install pytest
          pip install coverage

      - name: Install dependencies (including pytest; with poetry)
        if: steps.check_poetry.outputs.files_exists == 'true'
        run: |
          poetry install --no-root --sync
          poetry run pip install pytest
          poetry run pip install coverage

      - name: Determine source folders
        run: |
          echo PROJECT_SOURCES="src/" >> ${GITHUB_ENV}
          echo PROJECT_TEST_SOURCES="tests/" >> ${GITHUB_ENV}

      - name: Check for test availability (with pip)
        id: check_test_pip
        if: steps.check_poetry.outputs.files_exists == 'false'
        run: echo testCount=$(pytest --collect-only -q | head -n -2 | wc -l) >> ${GITHUB_OUTPUT}

      - name: Check for test availability (with poetry)
        id: check_test_poetry
        if: steps.check_poetry.outputs.files_exists == 'true'
        run: |
          source .venv/bin/activate
          echo testCount=$(pytest --collect-only -q | head -n -2 | wc -l) >> ${GITHUB_OUTPUT}

      - name: Test with pytest (with pip)
        if: steps.check_poetry.outputs.files_exists == 'false' && steps.check_test_pip.outputs.testCount != 0
        run: |
          coverage run -m pytest
          coverage xml

      - name: Skip (with pip)
        if: steps.check_poetry.outputs.files_exists == 'false' && steps.check_test_pip.outputs.testCount == 0
        run: echo PROJECT_TEST_SOURCES="" >> ${GITHUB_ENV}

      - name: Test with pytest (with poetry)
        if: steps.check_poetry.outputs.files_exists == 'true' && steps.check_test_poetry.outputs.testCount != 0
        run: |
          source .venv/bin/activate
          coverage run -m pytest
          coverage xml

      - name: Skip (with poetry)
        if: steps.check_poetry.outputs.files_exists == 'true' && steps.check_test_poetry.outputs.testCount == 0
        run: echo PROJECT_TEST_SOURCES="" >> ${GITHUB_ENV}

      - name: Setup sonarqube
        uses: warchant/setup-sonar-scanner@v8

      - name: Run sonarqube
        if: startsWith(github.event_name , 'pull_request') == false
        run: sonar-scanner
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.token=${{ secrets.SONAR_LOGIN }}
          -Dsonar.branch.name=${{ env.BRANCH_NAME }}
          -Dsonar.projectKey=${{ env.SONAR_KEY }}
          -Dsonar.projectName=${{ env.COMPONENT_NAME }}
          -Dsonar.projectVersion=${{ env.SONAR_BASE_VERSION }}
          -Dsonar.sources=${{ env.PROJECT_SOURCES }}
          -Dsonar.tests=${{ env.PROJECT_TEST_SOURCES }}
          -Dsonar.coverage.exclusions=tests/**
          -Dsonar.python.coverage.reportPaths=./coverage.xml
          -Dsonar.qualitygate.wait=true

      - name: Run sonarqube (on PR)
        if: startsWith(github.event_name , 'pull_request')
        run: sonar-scanner
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.token=${{ secrets.SONAR_LOGIN }}
          -Dsonar.projectKey=${{ env.SONAR_KEY }}
          -Dsonar.projectName=${{ env.COMPONENT_NAME }}
          -Dsonar.projectVersion=${{ env.SONAR_BASE_VERSION }}
          -Dsonar.pullrequest.github.endpoint=https://api.github.com
          -Dsonar.pullrequest.github.repository=${{ github.repository }}
          -Dsonar.pullrequest.base=${{ github.base_ref }}
          -Dsonar.pullrequest.branch=${{ github.head_ref }}
          -Dsonar.pullrequest.key=${{ github.event.number }}
          -Dsonar.sources=${{ env.PROJECT_SOURCES }}
          -Dsonar.tests=${{ env.PROJECT_TEST_SOURCES }}
          -Dsonar.coverage.exclusions=tests/**
          -Dsonar.python.coverage.reportPaths=./coverage.xml
          -Dsonar.qualitygate.wait=true
