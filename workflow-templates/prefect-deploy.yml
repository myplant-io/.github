###
# GitHub action that builds a docker container and deploys it to AWS ECR.
#
# Prerequisites:
#  - ".github/workflow-config.env" exists
#
# Created by: Daniel Hons, Nikolaus Krismer
###
name: Build and deploy

on:
  release:
    types: [released]
  push:
    branches: [develop]
  workflow_dispatch:

jobs:
  buildAndDeploy:
    name: 'Job: Build and deploy'
    runs-on: [self-hosted-standard]
    concurrency:
      group: deploy_${{ github.ref }}
      cancel-in-progress: false

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_READONLY_PAT }}

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v3
        with:
          fail: true
          files: '.github/workflow-config.env'

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/workflow-config.env'

      - name: Set env 'COMPONENT_NAME'
        if: env.COMPONENT_NAME == 'auto'
        run: echo "COMPONENT_NAME=${{ github.event.repository.name }}" >> ${GITHUB_ENV}

      - name: Set env 'DOCKER_REPOSITORY'
        if: env.DOCKER_REPOSITORY == 'auto'
        run: echo DOCKER_REPOSITORY=$(echo ${GITHUB_REPOSITORY} | sed 's:.*/::') >> ${GITHUB_ENV}

      - name: Set env 'DOCKER_REPOSITORY' (fallback to default)
        if: env.DOCKER_REPOSITORY == ''
        run: echo DOCKER_REPOSITORY='myplant-io' >> ${GITHUB_ENV}

      - name: Set env 'DOCKER_TAG_PREFIX'
        if: env.DOCKER_TAG_PREFIX == 'auto'
        run: echo DOCKER_TAG_PREFIX="${COMPONENT_NAME}_" >> ${GITHUB_ENV}

      - name: Set env 'SHA'
        run: echo SHA="$(echo ${GITHUB_SHA} | cut -c1-7)" >> ${GITHUB_ENV}

      - name: Set env 'TAG' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo TAG="${GITHUB_REF#refs/tags/}" >> ${GITHUB_ENV}

      - name: Set env 'VERSION' to SHA (for untagged deployments)
        if: startsWith(github.ref, 'refs/tags/') == false
        run: echo VERSION="${{ env.SHA }}" >> ${GITHUB_ENV}

      - name: Set 'VERSION' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo VERSION="${TAG#v}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Determine latest (pre-)release
        id: latest_release
        uses: InsonusK/get-latest-release@v1.1.0
        with:
          myToken: ${{ github.token }}
          view_top: 1

      - name: Set env 'IS_MANUAL_RELEASE' (a.k.a release triggered by user in GitHub - tag based)
        if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_MANUAL_RELEASE=${{ steps.latest_release.outputs.tag_name == env.TAG }} >> ${GITHUB_ENV}

      - name: Set env 'IS_RELEASE' (on manual release - tag based)
        if: env.IS_MANUAL_RELEASE == 'true' && startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_RELEASE=${{ steps.latest_release.outputs.draft == 'false' && steps.latest_release.outputs.prerelease == 'false' }} >> ${GITHUB_ENV}

      - name: Set env 'IS_MANUAL_RELEASE' (a.k.a release triggered by user in GitHub - release based)
        if: github.event_name == 'release'
        run: echo IS_MANUAL_RELEASE=true >> ${GITHUB_ENV}

      - name: Set env 'IS_RELEASE' (on manual release - release based)
        if: env.IS_MANUAL_RELEASE == 'true' && github.event_name == 'release'
        run: echo IS_RELEASE=${{ github.event.release.draft == false && github.event.release.prerelease == false }} >> ${GITHUB_ENV}

      - name: Get action system info
        if: env.VERBOSE_LOGGING == 'true'
        id: system-info
        uses: kenchan0130/actions-system-info@v1.3.0

      - name: Log env context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(env) }}

      - name: Log GitHub context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(github) }}

      - name: Log system details
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "os: ${{ runner.os }}"
          echo "host.cpu-model: ${{ steps.system-info.outputs.cpu-model }}"
          echo "host.cpu-core: ${{ steps.system-info.outputs.cpu-core }}"
          echo "host.name: ${{ steps.system-info.outputs.hostname }}"
          echo "os.name: ${{ steps.system-info.outputs.name }}"
          echo "os.kernel.release: ${{ steps.system-info.outputs.kernel-release }}"
          echo "os.kernel.version: ${{ steps.system-info.outputs.kernel-version }}"
          echo "os.platform: ${{ steps.system-info.outputs.platform }}"
          echo "os.release: ${{ steps.system-info.outputs.release }}"

      - name: Find Version Infos (BRANCH_TAG incl. pre-check)
        if: env.IS_MANUAL_RELEASE == 'true' && env.IS_RELEASE == 'true'
        run: |
          branchTag=$(git describe --tags)
          [[ "${branchTag#v}" =~ ^[0-9]+\.[0-9]+\.[0-9] ]] || exit 1
          echo BRANCH_TAG=$branchTag >> ${GITHUB_ENV}

      - name: Find Version Infos (LAST_RELEASE_TAG)
        if: env.IS_MANUAL_RELEASE == 'true' && env.IS_RELEASE == 'true'
        run: echo LAST_RELEASE_TAG=$(git tag -l --sort=v:refname | grep -v "${{ env.BRANCH_TAG }}" | grep -v ".*-.*" | tail -n 1) >> ${GITHUB_ENV}

      - name: Find Version Infos (BUID_FROM_TAG)
        if: env.IS_MANUAL_RELEASE == 'true' && env.IS_RELEASE == 'true'
        run: echo BUILD_FROM_TAG=${{ env.LAST_RELEASE_TAG }} >> ${GITHUB_ENV}

      - name: Build changelog on manual release
        if: env.IS_MANUAL_RELEASE == 'true' && env.IS_RELEASE == 'true'
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          configurationJson: |
            { "pr_template": "- #{{TITLE}} (by @#{{AUTHOR}} in ##{{NUMBER}})",
              "categories": [
                {
                  "title": "## 🚀 Features",
                  "labels": [
                    "feat",
                    "feature"
                  ]
                },
                {
                  "title": "## 🐛 Fixes",
                  "labels": [
                    "fix",
                    "hotfix",
                    "bug"
                  ]
                },
                {
                  "title": "## 🛠️ Chores",
                  "labels": [
                    "chore"
                  ]
                },
                {
                  "title": "## 🛠️ Dependencies",
                  "labels": [
                    "deps",
                    "dep"
                  ]
                },
                {
                  "title": "## 🌀 Miscellaneous",
                  "labels": []
                }
              ],
              "label_extractor": [
                {
                  "method": "match",
                  "pattern": "^([\\w\\-]+)",
                  "target": "$1",
                  "on_property": "branch"
                }
              ]
            }
          outputFile: release_changelog.md
          fromTag: ${{ env.BUILD_FROM_TAG }}
          toTag: ${{ env.BRANCH_TAG }}

      - name: Check release changelog existence
        id: check_release_changelog
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: 'release_changelog.md'

      - name: Enhance changelog
        if: steps.check_release_changelog.outputs.files_exists == 'true'
        run: sed -i "s/DD-\([0-9]*\)/[DD-\1](https:\/\/innio.atlassian.net\/browse\/DD-\1)/g" release_changelog.md

      - name: Update Release
        if: steps.check_release_changelog.outputs.files_exists == 'true'
        uses: tubone24/update_release@v1.3.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ env.TAG }}
        with:
          body_path: release_changelog.md

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_USER }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET }}
          aws-region: us-east-1

      - name: Check docker registry
        id: check-docker-registry
        uses: myplant-io/github-actions/check-docker-registry@v1
        with:
          imagePrefix: ${{ env.DOCKER_TAG_PREFIX }}
          version: ${{ env.VERSION }}
          sha: ${{ env.SHA }}

      - name: Login to Amazon ECR
        id: aws-login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker login (to AWS ECR)
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.aws-login-ecr.outputs.registry }}

      - name: Check for docker context
        id: docker-context-check
        run: echo contextFound=$(docker context ls | grep -w 'buildx' | wc -l) >> ${GITHUB_OUTPUT}

      - name: Set up Docker Context for Buildx
        if: steps.docker-context-check.outputs.contextFound == 0
        run: docker context create buildx-context

      - name: Set up Docker Buildx
        if: steps.check-docker-registry.outputs.imageExists == 'false'
        uses: docker/setup-buildx-action@v3
        with:
          endpoint: buildx-context

      - name: Set env 'IMAGE_TAG'
        shell: bash
        run: echo IMAGE_TAG="${{ steps.aws-login-ecr.outputs.registry }}/${{ env.DOCKER_REPOSITORY_NAME }}:${{ env.DOCKER_TAG_PREFIX }}${{ env.VERSION }}" >> ${GITHUB_ENV}

      - name: Build and push docker image
        if: steps.check-docker-registry.outputs.imageExists == 'false'
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILDKIT: 1
        with:
          provenance: false
          push: true
          tags: ${{ env.IMAGE_TAG }}
          secrets: nexus_pswd=${{ secrets.NEXUS_MYPLANT_PUBLISHER }}

      - name: Register in prefect (staging)
        if: env.IS_MANUAL_RELEASE != 'true' && env.IS_RELEASE != 'true'
        env:
          DOCKER_BUILDKIT: 1
        run: docker run ${{ env.IMAGE_TAG }} prefect-toolbox register --project-name "${{ env.PROJECT_NAME }}" --src-dir /src --credentials "${{ secrets.PREFECT_CREDENTIALS }}" --prefect-server "${{ env.STAGING_PREFECT_SERVER_URL }}" --image "${{ env.IMAGE_TAG }}"

      - name: Register in prefect (production)
        if: env.IS_MANUAL_RELEASE == 'true' && env.IS_RELEASE == 'true'
        env:
          DOCKER_BUILDKIT: 1
        run: docker run ${{ env.IMAGE_TAG }} prefect-toolbox register --project-name "${{ env.PROJECT_NAME }}" --src-dir /src --credentials "${{ secrets.PREFECT_CREDENTIALS }}" --prefect-server "${{ env.PROD_PREFECT_SERVER_URL }}" --image "${{ env.IMAGE_TAG }}"
