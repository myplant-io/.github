###
# GitHub action that creates a Software-Bill-of-Material (SBOM) and pushes the
# result to the myplant dependency tracker (dependency-dev.myplant.io).
#
# Prerequisites:
#  - ".github/workflow-config.env" exists
#
# Created by: Nikolaus Krismer and Nikolaus Brunner
###
name: Dependency check

on:
  schedule:
    # at 00:00 every sunday (on the default branch - develop)
    - cron: '0 0 * * SUN'
  push:
    branches: [main, master]
  repository_dispatch:
    types: [dependencyCheck]
  workflow_dispatch:

jobs:
  setup:
    name: 'Job: Python setup'
    runs-on: [self-hosted-standard]
    outputs:
      branch-name: ${{ env.BRANCH_NAME }}
      component-name: ${{ env.COMPONENT_NAME }}
      poetry-version: ${{ env.POETRY_VERSION }}
      python-version-file: ${{ env.PYTHON_VERSION_FILE }}
      version: ${{ env.VERSION }}

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v5
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Check python version determination (pyproject.toml)
        id: check_file_pyproject
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: 'pyproject.toml'

      - name: Use pyproject.toml as python version file
        if: steps.check_file_pyproject.outputs.files_exists == 'true'
        run: echo PYTHON_VERSION_FILE="pyproject.toml" >> ${GITHUB_ENV}

      - name: Check python version determination (.python-version)
        if: steps.check_file_pyproject.outputs.files_exists == 'false'
        id: check_file_python_version
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: '.python-version'

      - name: Use .python-version as python version file
        if: steps.check_file_python_version.outputs.files_exists == 'true'
        run: echo PYTHON_VERSION_FILE=".python-version" >> ${GITHUB_ENV}

      - name: Check python version determination
        if: steps.check_file_pyproject.outputs.files_exists == 'false' &&  steps.check_file_python_version.outputs.files_exists == 'false'
        run: |
          echo "::error Either pyproject.toml or .python-version must exists (and contain a python version number)"
          exit 1

      - name: Determine poetry version from pyproject.toml
        id: determine_poetry_version
        uses: myplant-io/github-actions/poetry-version@v1

      - name: Set env 'POETRY_VERSION'
        run: echo POETRY_VERSION="${{ steps.determine_poetry_version.outputs.version }}" >> ${GITHUB_ENV}

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v3
        with:
          fail: true
          files: '.github/workflow-config.env'

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/workflow-config.env'

      - name: Checkout git repository (for dispatched runs)
        uses: actions/checkout@v5
        if: github.event_name == 'repository_dispatch'
        with:
          fetch-depth: 0
          ref: '${{ github.event.client_payload.branch }}'

      - name: Set env 'COMPONENT_NAME'
        if: env.COMPONENT_NAME == 'auto'
        run: echo COMPONENT_NAME="${GITHUB_REPOSITORY#*/}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME'
        run: echo BRANCH_NAME="${GITHUB_REF/refs\/heads\//}" >> ${GITHUB_ENV}

      - name: Set env 'SHA'
        run: echo SHA="$(echo ${GITHUB_SHA} | cut -c1-7)" >> ${GITHUB_ENV}

      - name: Set 'VERSION' to SHA
        run: echo VERSION="${{ env.SHA }}" >> ${GITHUB_ENV}

      - name: Get action system info
        if: env.VERBOSE_LOGGING == 'true'
        id: system-info
        uses: kenchan0130/actions-system-info@v1.4.0

      - name: Log dependency tracker context
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "dependency.track.projectname: ${{ env.COMPONENT_NAME }}"
          echo "dependency.track.projectversion: ${{ env.BRANCH_NAME }}"

      - name: Log env context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(env) }}

      - name: Log GitHub context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(github) }}

      - name: Log system details
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "os: ${{ runner.os }}"
          echo "host.cpu-model: ${{ steps.system-info.outputs.cpu-model }}"
          echo "host.cpu-core: ${{ steps.system-info.outputs.cpu-core }}"
          echo "host.name: ${{ steps.system-info.outputs.hostname }}"
          echo "os.name: ${{ steps.system-info.outputs.name }}"
          echo "os.kernel.release: ${{ steps.system-info.outputs.kernel-release }}"
          echo "os.kernel.version: ${{ steps.system-info.outputs.kernel-version }}"
          echo "os.platform: ${{ steps.system-info.outputs.platform }}"
          echo "os.release: ${{ steps.system-info.outputs.release }}"

  dependencyCheck:
    name: 'Job: Dependency check'
    needs: ['setup']
    runs-on: [self-hosted-standard]

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v5
        if: github.event_name != 'repository_dispatch'
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Check poetry file existence
        id: check_poetry
        uses: andstor/file-existence-action@v3
        with:
          files: 'poetry.lock'

      - name: Prepare poetry
        if: steps.check_poetry.outputs.files_exists == 'true'
        uses: snok/install-poetry@v1
        with:
          version: ${{ needs.setup.outputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        if: steps.check_poetry.outputs.files_exists == 'true'
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Check uv file existence
        id: check_uv
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: 'uv.lock'

      - name: Prepare uv
        if: steps.check_uv.outputs.files_exists == 'true'
        uses: astral-sh/setup-uv@v7
        with:
          activate-environment: true

      - name: Prepare python (with pip)
        if: steps.check_poetry.outputs.files_exists == 'false' && steps.check_uv.outputs.files_exists == 'false'
        uses: actions/setup-python@v6
        with:
          cache: 'pip'
          python-version-file: ${{ needs.setup.outputs.python-version-file }}

      - name: Prepare python (with poetry)
        if: steps.check_poetry.outputs.files_exists == 'true'
        uses: actions/setup-python@v6
        with:
          cache: 'poetry'
          python-version-file: ${{ needs.setup.outputs.python-version-file }}

      - name: Prepare python (with uv)
        if: steps.check_uv.outputs.files_exists == 'true'
        uses: actions/setup-python@v6
        with:
          python-version-file: ${{ needs.setup.outputs.python-version-file }}

      - name: Prepare PATH (Unix)
        if: runner.os != 'Windows'
        run: echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Prepare PATH (Windows)
        if: runner.os == 'Windows'
        run: echo "${HOME}/.local/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Configure poetry
        if: steps.check_poetry.outputs.files_exists == 'true'
        run: |
          echo POETRY_REPOSITORIES_MYPLANT_NEXUS='https://nexus-dev.myplant.io/repository/myplantpy/' >> ${GITHUB_ENV}
          echo POETRY_REPOSITORIES_MYPLANT_NEXUS_EXTERNAL='https://nexus-dev.myplant.io/repository/myplantpyexternal/' >> ${GITHUB_ENV}
          echo POETRY_HTTP_BASIC_MYPLANT_NEXUS_USERNAME='myplant-publisher' >> ${GITHUB_ENV}
          echo POETRY_HTTP_BASIC_MYPLANT_NEXUS_PASSWORD='${{ secrets.NEXUS_MYPLANT_PUBLISHER }}' >> ${GITHUB_ENV}
          echo POETRY_HTTP_BASIC_MYPLANT_NEXUS_EXTERNAL_USERNAME='myplant-publisher' >> ${GITHUB_ENV}
          echo POETRY_HTTP_BASIC_MYPLANT_NEXUS_EXTERNAL_PASSWORD='${{ secrets.NEXUS_MYPLANT_PUBLISHER }}' >> ${GITHUB_ENV}

      - name: Configure uv
        if: steps.check_uv.outputs.files_exists == 'true'
        run: |
          echo UV_INDEX_MYPLANT_NEXUS_USERNAME='myplant-publisher' >> ${GITHUB_ENV}
          echo UV_INDEX_MYPLANT_NEXUS_PASSWORD='${{ secrets.NEXUS_MYPLANT_PUBLISHER }}' >> ${GITHUB_ENV}
          echo UV_INDEX_MYPLANT_NEXUS_EXTERNAL_USERNAME='myplant-publisher' >> ${GITHUB_ENV}
          echo UV_INDEX_MYPLANT_NEXUS_EXTERNAL_PASSWORD='${{ secrets.NEXUS_MYPLANT_PUBLISHER }}' >> ${GITHUB_ENV}

      - name: Install cyclonedx dependency (with pip)
        if: steps.check_poetry.outputs.files_exists == 'false' && steps.check_uv.outputs.files_exists == 'false'
        run: pip install cyclonedx-bom

      - name: Install cyclonedx dependency (with poetry)
        if: steps.check_poetry.outputs.files_exists == 'true'
        run: poetry run pip install cyclonedx-bom

      - name: Install cyclonedx dependency (with uv)
        if: steps.check_uv.outputs.files_exists == 'true'
        run: uv run pip install cyclonedx-bom

      - name: CycloneDX Python Generate SBOM (with pip)
        uses: myplant-io/github-actions/python-generate-sbom@v1
        if: steps.check_poetry.outputs.files_exists == 'false' && steps.check_uv.outputs.files_exists == 'false'
        with:
          input: './requirements.txt'
          output: './bom.xml'
          type: 'requirements'

      - name: CycloneDX Python Generate SBOM (with poetry)
        uses: myplant-io/github-actions/python-generate-sbom@v1
        if: steps.check_poetry.outputs.files_exists == 'true'
        with:
          input: './'
          output: './bom.xml'
          type: 'poetry'

      - name: CycloneDX Python Generate SBOM (with uv)
        uses: myplant-io/github-actions/python-generate-sbom@v1
        if: steps.check_uv.outputs.files_exists == 'true'
        with:
          input: '.venv/bin/python'
          output: './bom.xml'
          type: 'environment'

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: SBOM
          path: './bom.xml'

      - name: Fetch repository topics
        id: repository_topics
        run: |
          topics=$(curl -H "Accept: application/vnd.github.mercy-preview+json" \
                        -H "Authorization: token ${{ secrets.CI_PAT }}" \
                        https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/topics \
                        | jq -r '.names | join(",")')
          echo topics="$topics" >> ${GITHUB_OUTPUT}

      - name: Publish dependency check result to tracker
        uses: DependencyTrack/gh-upload-sbom@v3
        with:
          apikey: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
          autocreate: true
          bomfilename: './bom.xml'
          projectname: ${{ needs.setup.outputs.component-name }}
          projectversion: ${{ needs.setup.outputs.branch-name }}
          projecttags: '${{ steps.repository_topics.outputs.topics }},githubowner-${{ github.repository_owner }},githubrepo-${{ github.event.repository.name }}'
          serverhostname: ${{ secrets.DEPENDENCYTRACK_URL }}
