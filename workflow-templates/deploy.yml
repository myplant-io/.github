name: Build and deploy

on:
  push:
    branches: [master, develop, release/**, hotfix/**]
  release:
    types: [released]
  workflow_dispatch:

env:
  COMPONENT_NAME: auto
  DEPLOYMENT_REPO: 'myplant-io/deployment-esm2prog'
  DOCKER_TAG_PREFIX: auto
  GRADLE_BUILD_TASK: 'build test'
  GRADLE_DEPLOY_TASK: 'dockerPushAndDeleteLocal -x test'
  JAVA_VERSION: 11
  PUSH_DEPLOY_TARGET: '["staging/${COMPONENT_NAME}.yaml"]'
  PRE_RELEASE_DEPLOY_TARGET: none
  RELEASE_DEPLOY_TARGET: '["production/${COMPONENT_NAME}.yaml"]'
  REPORT_DIR: auto

jobs:
  buildAndDeploy:
    name: 'Job: Build and deploy'
    runs-on: ubuntu-latest

    steps:
      - name: Set git to use LF
        shell: bash
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Checkout github actions repository
        uses: actions/checkout@v2
        with:
          repository: myplant-io/github-actions
          ref: v0.4.0
          token: ${{ secrets.CI_PAT }}
          path: .github/actions

      - name: Check setting file existence
        id: check_settings_file
        if: env.COMPONENT_NAME == 'auto'
        uses: andstor/file-existence-action@v1
        with:
          allow_failure: true
          files: ./settings.gradle

      - name: Read settings file
        if: env.COMPONENT_NAME == 'auto' && steps.check_settings_file.outputs.files_exists == 'true'
        id: gradle_settings
        uses: juliangruber/read-file-action@v1
        with:
          path: ./settings.gradle

      - name: Set env 'COMPONENT_NAME' (settings are present)
        if: env.COMPONENT_NAME == 'auto' && steps.check_settings_file.outputs.files_exists == 'true'
        shell: bash
        run: echo COMPONENT_NAME=$(echo -n "${{ steps.gradle_settings.outputs.content }}" | grep "rootProject.name" | cut -d'=' -f2 | sed  s/[\'\\t\ ]*//g) >> ${GITHUB_ENV}

      - name: Set env 'COMPONENT_NAME' (no settings found)
        if: env.COMPONENT_NAME == 'auto' && steps.check_settings_file.outputs.files_exists == 'false'
        shell: bash
        run: echo COMPONENT_NAME=${{ github.event.repository.name }} >> ${GITHUB_ENV}

      - name: Set env 'REPORT_DIR'
        if: env.REPORT_DIR == 'auto'
        shell: bash
        run: echo REPORT_DIR="build/reports/tests" >> ${GITHUB_ENV}

      - name: Set env 'DOCKER_TAG_PREFIX'
        if: env.DOCKER_TAG_PREFIX == 'auto'
        shell: bash
        run: echo DOCKER_TAG_PREFIX="${COMPONENT_NAME}_" >> ${GITHUB_ENV}

      - name: Set env 'SHA'
        shell: bash
        run: echo SHA=$(echo ${GITHUB_SHA} | cut -c1-7) >> ${GITHUB_ENV}

      - name: Set env 'VERSION' to SHA (for untagged deployments)
        if: startsWith(github.ref, 'refs/tags/') != true
        shell: bash
        run: echo VERSION=${{ env.SHA }} >> ${GITHUB_ENV}

      - name: Set env 'TAG' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: echo TAG=${GITHUB_REF/refs\/tags\//} >> ${GITHUB_ENV}

      - name: Set 'VERSION' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: echo VERSION=${TAG#v} >> ${GITHUB_ENV}

      - name: Initialize 'DEPLOY_TARGETS'
        shell: bash
        run: echo "DEPLOY_TARGETS=none" >> $GITHUB_ENV

      - name: Set env 'DEPLOY_TARGETS' for CI (to staging)
        if: github.event_name == 'push' && env.PUSH_DEPLOY_TARGET != 'none'
        shell: bash
        run: echo DEPLOY_TARGETS=$(echo ${PUSH_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' for pre-release
        if: github.event_name == 'release' && github.event.release.prerelease && env.PRE_RELEASE_DEPLOY_TARGET != 'none'
        shell: bash
        run: echo DEPLOY_TARGETS=$(echo ${PRE_RELEASE_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' for release
        if: github.event_name == 'release' && !github.event.release.prerelease && env.RELEASE_DEPLOY_TARGET != 'none'
        shell: bash
        run: echo DEPLOY_TARGETS=$(echo ${RELEASE_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' for master branch (only run build task; never deploy)
        if: github.ref == 'refs/heads/master'
        run: echo "DEPLOY_TARGETS=none" >> ${GITHUB_ENV}

      - name: Log details
        shell: bash
        run: |
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_REPO: ${{ github.event.repository.name }}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "RELEASE INFO: ${{ join(github.event.release, '\n') }}"
          echo "COMPONENT_NAME: ${{ env.COMPONENT_NAME }}"
          echo "DEPLOYMENT_REPO: ${{ env.DEPLOYMENT_REPO }}"
          echo "REPORT_DIR: ${{ env.REPORT_DIR }}"
          echo "DEPLOY_TARGETS: ${{ env.DEPLOY_TARGETS }}"
          echo "DOCKER_TAG_PREFIX: ${{ env.DOCKER_TAG_PREFIX }}"
          echo "TAG: ${{ env.TAG }}"
          echo "VERSION: ${{ env.VERSION }}"

      - name: Prepare gradle properties
        shell: bash
        env:
          GRADLE_PROPS: ${{ secrets.GRADLE_PROPERTIES }}
        run: printf "\n$GRADLE_PROPS" >> gradle.properties

      - name: Prepare Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with gradle (incl. test and sonar)
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: ${{ env.GRADLE_BUILD_TASK }} -Pversion=${{ env.VERSION }}

      - name: Upload test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-result
          path: ${{ env.REPORT_DIR }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_USER }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET }}
          aws-region: us-east-1

      - name: Check docker registry
        id: check-docker-registry
        uses: ./.github/actions/check-docker-registry
        with:
          imagePrefix: ${{ env.DOCKER_TAG_PREFIX }}
          version: ${{ env.VERSION }}
          sha: ${{ env.SHA }}

      - name: Build and push docker image
        if: steps.check-docker-registry.outputs.imageExists == 'false'
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: ${{ env.GRADLE_DEPLOY_TASK }} -Pversion=${{ env.VERSION }}

      - name: Deploy Service
        if: env.DEPLOY_TARGETS != 'none'
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.CI_PAT }}
          repository: myplant-io/ci-deploy-action
          event-type: deploy
          client-payload: '{
            "deployment_repo": "${{ env.DEPLOYMENT_REPO }}",
            "docker_tag_prefix": "${{ env.DOCKER_TAG_PREFIX }}",
            "version": "${{ env.VERSION }}",
            "component_name": "${{ env.COMPONENT_NAME }}",
            "deployment_files": ${{ env.DEPLOY_TARGETS }},
            "git_sha": "${{ env.SHA }}"
          }'

      - name: Putting release changes to master
        if: github.event_name == 'release' && !github.event.release.prerelease
        uses: ./.github/actions/merge-back-to
