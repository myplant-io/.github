###
# GitHub action that creates a Software-Bill-of-Material (SBOM) and pushes the
# result to the myplant dependency tracker (dependency-dev.myplant.io).
#
# Prerequisites:
#  - ".github/workflow-config.env" exists
#  - myplant-io/gradle-plugins >=3.6
#
# Created by: Nikolaus Krismer
###
name: Dependency check

on:
  schedule:
    # at 00:00 every sunday (on the default branch - develop)
    - cron: '0 0 * * SUN'
  push:
    branches: [main, master]
  repository_dispatch:
    types: [dependencyCheck]
  workflow_dispatch:

jobs:
  setup:
    name: 'Job: Setup dependency check'
    runs-on: [self-hosted-standard]
    outputs:
      branch-name: ${{ steps.results.outputs.branch-name }}
      java-version: ${{ steps.results.outputs.java-version }}
      project-details: ${{ steps.results.outputs.project-details }}
      project-names: ${{ steps.results.outputs.project-names }}
      subproject-count: ${{ steps.gradle-project-stats.outputs.subproject-count }}
      version: ${{ steps.results.outputs.version }}

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4
        if: github.event_name != 'repository_dispatch'
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Checkout git repository (for dispatched runs)
        uses: actions/checkout@v4
        if: github.event_name == 'repository_dispatch'
        with:
          fetch-depth: 0
          ref: '${{ github.event.client_payload.branch }}'

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v3
        with:
          fail: true
          files: '.github/workflow-config.env'

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/workflow-config.env'

      - name: Check setting file existence
        id: check_settings_file
        if: env.COMPONENT_NAME == 'auto'
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: 'settings.gradle'

      - name: Set env 'COMPONENT_NAME' (settings are present)
        if: env.COMPONENT_NAME == 'auto' && steps.check_settings_file.outputs.files_exists == 'true'
        run: echo COMPONENT_NAME="$(grep 'rootProject.name' settings.gradle | cut -d '=' -f 2 | tr -d '\r' | sed 's|[\"'\'\\t' ]||g')" >> ${GITHUB_ENV}

      - name: Set env 'COMPONENT_NAME' (no settings found)
        if: env.COMPONENT_NAME == 'auto' && steps.check_settings_file.outputs.files_exists == 'false'
        run: echo COMPONENT_NAME="${GITHUB_REPOSITORY#*/}" >> ${GITHUB_ENV}

      - name: Set env 'SHA'
        run: echo SHA="$(echo ${GITHUB_SHA} | cut -c1-7)" >> ${GITHUB_ENV}

      - name: Set env 'TAG' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo TAG="${GITHUB_REF#refs/tags/}" >> ${GITHUB_ENV}

      - name: Set env 'VERSION' to SHA (for untagged deployments)
        if: startsWith(github.ref, 'refs/tags/') == false
        run: echo VERSION="${{ env.SHA }}" >> ${GITHUB_ENV}

      - name: Set 'VERSION' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo VERSION="${TAG#v}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME'
        if: github.event_name != 'repository_dispatch'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME' (for dispatched runs)
        if: github.event_name == 'repository_dispatch'
        run: echo BRANCH_NAME="${{ github.event.client_payload.branch }}" >> ${GITHUB_ENV}

      - name: Get action system info
        if: env.VERBOSE_LOGGING == 'true'
        id: system-info
        uses: kenchan0130/actions-system-info@v1.3.0

      - name: Log dependency tracker context
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "dependency.track.projectname: ${{ env.COMPONENT_NAME }}"
          echo "dependency.track.projectversion: ${{ env.BRANCH_NAME }}"

      - name: Log env context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(env) }}

      - name: Log GitHub context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(github) }}

      - name: Log system details
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "os: ${{ runner.os }}"
          echo "host.cpu-model: ${{ steps.system-info.outputs.cpu-model }}"
          echo "host.cpu-core: ${{ steps.system-info.outputs.cpu-core }}"
          echo "host.name: ${{ steps.system-info.outputs.hostname }}"
          echo "os.name: ${{ steps.system-info.outputs.name }}"
          echo "os.kernel.release: ${{ steps.system-info.outputs.kernel-release }}"
          echo "os.kernel.version: ${{ steps.system-info.outputs.kernel-version }}"
          echo "os.platform: ${{ steps.system-info.outputs.platform }}"
          echo "os.release: ${{ steps.system-info.outputs.release }}"

      - name: Prepare gradle properties
        run: printf "\n$GRADLE_PROPS" >> gradle.properties
        env:
          GRADLE_PROPS: ${{ secrets.GRADLE_PROPERTIES }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Prepare gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Get java version from gradle
        run: echo "JAVA_VERSION=$(./gradlew -q javaVersion -Dorg.gradle.java.home=$JAVA_HOME_17_X64 | tail -n 1)" >> ${GITHUB_ENV}

      - name: Prepare java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Determine number of gradle (sub)projects
        id: gradle-project-stats
        run: echo subproject-count="$(./gradlew -q projects | grep -- '--- Project' | cut -d ':' -f 2 | sed "s/'$//" | wc -l)" >> ${GITHUB_OUTPUT}

      - name: Finding gradle subproject(s)
        id: gradle-projects
        if: steps.gradle-project-stats.outputs.subproject-count != '0'
        run: echo subprojects="$(./gradlew -q projects | grep -- '--- Project' | cut -d ':' -f 2 | sed "s/'$//" | tr '\n' ' ' | xargs)" >> ${GITHUB_OUTPUT}

      - name: Prepare JSON meta information (single project)
        if: steps.gradle-project-stats.outputs.subproject-count == '0'
        run: |
          echo PROJECT_DETAILS_JSON="[$(./gradlew -q getProjectMetaJson | tail -n 1)]" >> ${GITHUB_ENV}
          echo PROJECT_NAMES="'[\"ROOT_PROJECT\"]'" >> ${GITHUB_ENV}

      - name: Prepare project names (multirepo)
        if: steps.gradle-project-stats.outputs.subproject-count != '0'
        run: |
          IFS=' ' read -ra subprojects <<< "${{ steps.gradle-projects.outputs.subprojects }}"
          for p in ${subprojects[@]}; do
            names+=", \"${p}\""
          done
          echo PROJECT_NAMES="'[${names:2}]'" >> ${GITHUB_ENV}

      - name: Prepare JSON meta information (multirepo)
        if: steps.gradle-project-stats.outputs.subproject-count != '0'
        run: |
          IFS=' ' read -ra subprojects <<< "${{ steps.gradle-projects.outputs.subprojects }}"
          for p in ${subprojects[@]}; do
            value=$(./gradlew -q :${p}:getProjectMetaJson | tail -n 1)
            json+=", ${value}"
          done
          echo PROJECT_DETAILS_JSON="'[${json:2}]'" >> ${GITHUB_ENV}

      - name: Publish job information
        id: results
        run: |
          echo branch-name=${{ env.BRANCH_NAME }} >> ${GITHUB_OUTPUT}
          echo java-version=${{ env.JAVA_VERSION }} >> ${GITHUB_OUTPUT}
          echo project-details=${{ env.PROJECT_DETAILS_JSON }} >> ${GITHUB_OUTPUT}
          echo project-names=${{ env.PROJECT_NAMES }} >> ${GITHUB_OUTPUT}
          echo version=${{ env.VERSION }} >> ${GITHUB_OUTPUT}

  dependencyCheck:
    name: 'Job: Dependency check (${{ matrix.project-name }})'
    needs: ['setup']
    runs-on: [self-hosted-standard]

    strategy:
      max-parallel: 1
      matrix:
        project-name: ${{fromJSON(needs.setup.outputs.project-names)}}

    steps:
      - name: Get project details
        id: project-details
        if: matrix.project-name != 'ROOT_PROJECT'
        run: echo json=$(jq -r '.[] | select(.name == "${{ matrix.project-name }}")' <<< "$JSON") >> ${GITHUB_OUTPUT}
        env:
          JSON: ${{ needs.setup.outputs.project-details }}

      - name: Get project build dir (multirepo)
        if: matrix.project-name != 'ROOT_PROJECT'
        run: echo BUILD_DIR=$(jq -r '.buildDir' <<< "$DETAILS") >> ${GITHUB_ENV}
        env:
          DETAILS: ${{ steps.project-details.outputs.json }}

      - name: Get project build dir (single project)
        if: matrix.project-name == 'ROOT_PROJECT'
        run: echo BUILD_DIR="build" >> ${GITHUB_ENV}

      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4
        if: github.event_name != 'repository_dispatch'
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Checkout git repository (for dispatched runs)
        uses: actions/checkout@v4
        if: github.event_name == 'repository_dispatch'
        with:
          fetch-depth: 0
          ref: '${{ github.event.client_payload.branch }}'

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v3
        with:
          fail: true
          files: '.github/workflow-config.env'

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/workflow-config.env'

      - name: Prepare gradle properties
        run: printf "\n$GRADLE_PROPS" >> gradle.properties
        env:
          GRADLE_PROPS: ${{ secrets.GRADLE_PROPERTIES }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Prepare gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Prepare java ${{ needs.setup.outputs.java-version }}
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: ${{ needs.setup.outputs.java-version }}

      - name: Set env 'GRADLE_DEPENDENCY_CHECK_TASK' (fallback to default)
        if: env.GRADLE_DEPENDENCY_CHECK_TASK == ''
        run: echo GRADLE_DEPENDENCY_CHECK_TASK='assemble cyclonedx' >> ${GITHUB_ENV}

      - name: Prepare gradle task (single project)
        if: matrix.project-name == 'ROOT_PROJECT'
        run: echo DC_TASK="${{ env.GRADLE_DEPENDENCY_CHECK_TASK }}" >> ${GITHUB_ENV}

      - name: Prepare gradle task (multirepo)
        if: matrix.project-name != 'ROOT_PROJECT'
        run: |
          IFS=' ' read -ra gradle_tasks <<< "${{ env.GRADLE_DEPENDENCY_CHECK_TASK }}"
          for task in ${gradle_tasks[@]}; do
            all_tasks+=" :${{ matrix.project-name }}:${task}"
          done
          echo DC_TASK=${all_tasks:1} >> ${GITHUB_ENV}

      - name: Dependency check with gradle
        run: ./gradlew ${{ env.DC_TASK }}
          -Pversion=${{ needs.setup.outputs.version }}
          -Pcyclonedx.includeBomSerialNumber=false
          -Dnvd.apiKey=${{ secrets.NVD_API_KEY }}

      - name: Post process dependency check bom
        run: sed -i "s/type=jar//g" ${{ env.BUILD_DIR }}/reports/bom.xml

      - name: Upload SBOM artifact
        if: ${{ env.VERBOSE_ARTIFACT_UPLOAD == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: SBOM
          path: '${{ env.BUILD_DIR }}/reports/bom.xml'

      - name: Publish dependency check result to tracker
        id: upload-dependency-track
        uses: myplant-io/github-actions/upload-dependency-track@v1
        with:
          apikey: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
          bomfilename: '${{ env.BUILD_DIR }}/reports/bom.xml'
          projectname: ${{ matrix.project-name }}
          projectversion: ${{ needs.setup.outputs.branch-name }}
