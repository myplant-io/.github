###
# GitHub action that creates a Software-Bill-of-Material (SBOM) and pushes the
# result to the myplant dependency tracker (dependency-dev.myplant.io).
#
# Prerequisites:
#  - ".github/workflow-config.env" exists
#
# Created by: Nikolaus Krismer
###
name: Dependency check

on:
  schedule:
    # at 00:00 every sunday (on the default branch - develop)
    - cron: '0 0 * * SUN'
  push:
    branches: [main, master]
  repository_dispatch:
    types: [dependencyCheck]
  workflow_dispatch:

jobs:
  dependencyCheck:
    name: 'Job: Dependency check'
    runs-on: [ plain-self-hosted ]
    concurrency:
      group: 'dependencyCheck_${{ github.ref }}'
      cancel-in-progress: true

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4
        if: github.event_name != 'repository_dispatch'
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Checkout git repository (for dispatched runs)
        uses: actions/checkout@v4
        if: github.event_name == 'repository_dispatch'
        with:
          fetch-depth: 0
          ref: '${{ github.event.client_payload.branch }}'

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v2
        with:
          fail: true
          files: '.github/workflow-config.env'

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/workflow-config.env'

      - name: Checkout github actions repository
        uses: actions/checkout@v4
        with:
          repository: myplant-io/github-actions
          ref: v0.6.2
          token: ${{ secrets.CI_PAT }}
          path: .github/actions

      - name: Check setting file existence
        id: check_settings_file
        if: env.COMPONENT_NAME == 'auto'
        uses: andstor/file-existence-action@v2
        with:
          fail: false
          files: 'settings.gradle'

      - name: Set env 'COMPONENT_NAME' (settings are present)
        if: env.COMPONENT_NAME == 'auto' && steps.check_settings_file.outputs.files_exists == 'true'
        run: echo COMPONENT_NAME="$(grep 'rootProject.name' settings.gradle | cut -d '=' -f 2 | tr -d '\r' | sed 's|[\"'\'\\t' ]||g')" >> ${GITHUB_ENV}

      - name: Set env 'COMPONENT_NAME' (no settings found)
        if: env.COMPONENT_NAME == 'auto' && steps.check_settings_file.outputs.files_exists == 'false'
        run: echo COMPONENT_NAME="${GITHUB_REPOSITORY#*/}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME'
        if: github.event_name != 'repository_dispatch'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME' (for dispatched runs)
        if: github.event_name == 'repository_dispatch'
        run: echo BRANCH_NAME="${{ github.event.client_payload.branch }}" >> ${GITHUB_ENV}

      - name: Set env 'SHA'
        run: echo SHA="$(echo ${GITHUB_SHA} | cut -c1-7)" >> ${GITHUB_ENV}

      - name: Set 'VERSION' to SHA
        run: echo VERSION="${{ env.SHA }}" >> ${GITHUB_ENV}

      - name: Log details
        run: |
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "VERSION: ${{ env.VERSION }}"
          echo "dependency.track.projectname: ${{ env.COMPONENT_NAME }}"
          echo "dependency.track.projectversion: ${{ env.BRANCH_NAME }}"

      - name: Prepare default Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Prepare gradle properties
        run: printf "\n$GRADLE_PROPS" >> gradle.properties
        env:
          GRADLE_PROPS: ${{ secrets.GRADLE_PROPERTIES }}

      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Prepare gradle
        uses: gradle/gradle-build-action@v2

      - name: Get java version from gradle
        run: echo "JAVA_VERSION=$(./gradlew -q :javaVersion -Dorg.gradle.java.home=$JAVA_HOME_17_X64 | tail -n 1)" >> ${GITHUB_ENV}

      - name: Prepare java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Dependency check with gradle
        uses: gradle/gradle-build-action@v2
        continue-on-error: true
        with:
          arguments: |
            ${{ env.GRADLE_DEPENDENCY_CHECK_TASK }} -Pversion=${{ env.VERSION }}
            -Pcyclonedx.includeBomSerialNumber=false

      - name: Post process dependency check bom
        run: sed -i "s/type=jar//g" build/reports/bom.xml

      - name: Upload SBOM artifact
        if: ${{ env.VERBOSE_ARTIFACT_UPLOAD == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: SBOM
          path: 'build/reports/bom.xml'

      - name: Publish dependency check result to tracker
        id: upload-dependency-track
        uses: ./.github/actions/upload-dependency-track
        with:
          apikey: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
          bomfilename: 'build/reports/bom.xml'
          projectname: ${{ env.COMPONENT_NAME }}
          projectversion: ${{ env.BRANCH_NAME }}
