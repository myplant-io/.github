name: Dependency check

on:
  schedule:
    # at 00:00 every sunday (on the default branch - develop)
    - cron: "0 0 * * SUN"
  push:
    branches: [main, master]
  repository_dispatch:
    types: [dependencyCheck]
  workflow_dispatch:

env:
  COMPONENT_NAME: auto
  SECURITY_LEVEL: "moderate"
  VERBOSE_ARTIFACT_UPLOAD: false

jobs:
  dependencyCheck:
    name: "Job: Dependency check"
    runs-on: [self-hosted, linux]
    concurrency:
      group: "dependencyCheck_${{ github.ref }}"
      cancel-in-progress: true

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v3
        if: github.event_name != 'repository_dispatch'
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Checkout git repository (for dispatched runs)
        uses: actions/checkout@v3
        if: github.event_name == 'repository_dispatch'
        with:
          fetch-depth: 0
          ref: "${{ github.event.client_payload.branch }}"

      - name: Checkout github actions repository
        uses: actions/checkout@v3
        with:
          repository: myplant-io/github-actions
          ref: v0.4.0
          token: ${{ secrets.CI_PAT }}
          path: .github/actions

      - name: Set env 'COMPONENT_NAME'
        if: env.COMPONENT_NAME == 'auto'
        run: echo COMPONENT_NAME="${GITHUB_REPOSITORY#*/}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME'
        if: github.event_name != 'repository_dispatch'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME' (for dispatched runs)
        if: github.event_name == 'repository_dispatch'
        run: echo BRANCH_NAME="${{ github.event.client_payload.branch }}" >> ${GITHUB_ENV}

      - name: Log details
        run: |
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "depdendency.track.projectname: ${{ env.COMPONENT_NAME }}"
          echo "depdendency.track.projectversion: ${{ env.BRANCH_NAME }}"

      - name: Prepare node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Add registry credentials
        run: cat <<<${NPM_REGISTRY_AUTH} >> .npmrc; cat .npmrc
        env:
          NPM_REGISTRY_AUTH: ${{ secrets.NPM_REGISTRY_AUTH }}

      - name: Create/restore cache for node_modules
        uses: actions/cache@v3
        id: node_modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies (if not previously cached)
        if: ${{ steps.node_modules-cache.outputs.cache-hit != 'true' }}
        run: yarn install --frozen-lockfile

      - name: Install html report
        run: npm install --no-package-lock --no-save yarn-audit-html

      - name: Perform audit
        run: yarn audit --groups dependencies --level ${SECURITY_LEVEL} --json | npx --no-install yarn-audit-html

      - name: Upload audit report artifact
        if: ${{ env.VERBOSE_ARTIFACT_UPLOAD == true }}
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: audit-report
          path: yarn-audit.html

      - name: Install cyclonedex
        run: npm install --no-package-lock --no-save @cyclonedx/bom

      - name: Create SBOM using cyclonedex
        run: ./node_modules/@cyclonedx/bom/bin/cyclonedx-bom

      - name: Upload SBOM artifact
        if: ${{ env.VERBOSE_ARTIFACT_UPLOAD == true }}
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: SBOM
          path: bom.xml

      - name: Publish dependency check result to tracker
        id: upload-dependency-track
        uses: ./.github/actions/upload-dependency-track
        with:
          apikey: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
          bomfilename: "./bom.xml"
          projectname: ${{ env.COMPONENT_NAME }}
          projectversion: ${{ env.BRANCH_NAME }}
