###
# GitHub action that creates a Software-Bill-of-Material (SBOM) and pushes the
# result to the myplant dependency tracker (dependency-dev.myplant.io).
#
# Prerequisites:
#  - ".github/workflow-config.env" exists
#
# Created by: Nikolaus Krismer
###
name: Dependency check

on:
  schedule:
    # at 00:00 every sunday (on the default branch - develop)
    - cron: '0 0 * * SUN'
  push:
    branches: [main, master]
  repository_dispatch:
    types: [dependencyCheck]
  workflow_dispatch:

jobs:
  dependencyCheck:
    name: 'Job: Dependency check'
    runs-on: [self-hosted-standard]
    concurrency:
      group: dependencyCheck_${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4
        if: github.event_name != 'repository_dispatch'
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Checkout git repository (for dispatched runs)
        uses: actions/checkout@v4
        if: github.event_name == 'repository_dispatch'
        with:
          fetch-depth: 0
          ref: '${{ github.event.client_payload.branch }}'

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v3
        with:
          fail: true
          files: '.github/workflow-config.env'

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/workflow-config.env'

      - name: Determine node version (check .nvmrc existence)
        id: check_nvmrc_existence
        uses: andstor/file-existence-action@v3
        with:
          fail: true
          files: '.nvmrc'

      - name: Determine node version (read from .nvmrc)
        if: steps.check_nvmrc_existence.outputs.files_exists == 'true'
        run: echo NODE_VERSION="$(cat ".nvmrc" | tr -d '\r' | sed 's/^v*//' | sed 's|[\"'\'\\t' ]||g')" >> ${GITHUB_ENV}

      - name: Set env 'COMPONENT_NAME'
        if: env.COMPONENT_NAME == 'auto'
        run: echo COMPONENT_NAME="${GITHUB_REPOSITORY#*/}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME'
        if: github.event_name != 'repository_dispatch'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME' (for dispatched runs)
        if: github.event_name == 'repository_dispatch'
        run: echo BRANCH_NAME="${{ github.event.client_payload.branch }}" >> ${GITHUB_ENV}

      - uses: kenchan0130/actions-system-info@v1.2.1
        if: env.VERBOSE_LOGGING == 'true'
        id: system-info

      - name: Log dependency tracker context
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "dependency.track.projectname: ${{ env.COMPONENT_NAME }}"
          echo "dependency.track.projectversion: ${{ env.BRANCH_NAME }}"

      - name: Log env context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(env) }}

      - name: Log GitHub context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(github) }}

      - name: Log system details
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "os: ${{ runner.os }}"
          echo "host.cpu-model: ${{ steps.system-info.outputs.cpu-model }}"
          echo "host.cpu-core: ${{ steps.system-info.outputs.cpu-core }}"
          echo "host.name: ${{ steps.system-info.outputs.hostname }}"
          echo "os.name: ${{ steps.system-info.outputs.name }}"
          echo "os.kernel.release: ${{ steps.system-info.outputs.kernel-release }}"
          echo "os.kernel.version: ${{ steps.system-info.outputs.kernel-version }}"
          echo "os.platform: ${{ steps.system-info.outputs.platform }}"
          echo "os.release: ${{ steps.system-info.outputs.release }}"

      - name: Prepare node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Add registry credentials
        run: cat <<<${NPM_REGISTRY_AUTH} >> .npmrc; cat .npmrc
        env:
          NPM_REGISTRY_AUTH: ${{ secrets.NPM_REGISTRY_AUTH }}

      - name: Create/restore cache for node_modules
        uses: actions/cache@v4
        id: node_modules-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies (if not previously cached)
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --ignore-optional

      - name: Install yarn-audit-html report
        if: ${{ env.VERBOSE_ARTIFACT_UPLOAD == 'true' }}
        run: yarn add --dev --ignore-workspace-root-check yarn-audit-html --ignore-optional

      - name: Perform yarn audit
        if: ${{ env.VERBOSE_ARTIFACT_UPLOAD == 'true' }}
        run: yarn audit --groups dependencies --level ${SECURITY_LEVEL} --json | npx --no-install yarn-audit-html

      - name: Upload audit report artifact
        if: ${{ env.VERBOSE_ARTIFACT_UPLOAD == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: audit-report
          path: yarn-audit.html

      - name: Install @cyclonedx/cdxgen
        run: yarn add --dev --ignore-workspace-root-check @cyclonedx/cdxgen@v8.6.2

      - name: Create SBOM using cyclonedx
        run: yarn run --no-install cdxgen --output bom.xml --required-only

      - name: Revert lockfile changes (caused by cdxgen and yarn-audit-html install)
        run: git checkout -- package.json yarn.lock

      - name: Upload SBOM artifact
        if: ${{ env.VERBOSE_ARTIFACT_UPLOAD == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: SBOM
          path: bom.xml

      - name: Publish dependency check result to tracker
        id: upload-dependency-track
        uses: myplant-io/github-actions/upload-dependency-track@v1
        with:
          apikey: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
          bomfilename: './bom.xml'
          projectname: ${{ env.COMPONENT_NAME }}
          projectversion: ${{ env.BRANCH_NAME }}
