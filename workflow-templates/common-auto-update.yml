###
# GitHub action that updates github actions from the template repository.
#
# Created by: Nikolaus Krismer
###
name: Update GitHub actions

on:
  pull_request_target:
    paths:
      - ".github/workflows/*auto-update*"
  workflow_dispatch:

jobs:
  updateGitHubActions:
    name: "Job: Update GH actions"
    # if: ${{ github.actor == 'dependabot[bot]' }} # allow update through workflow_dispatch?
    runs-on: [self-hosted, linux]
    concurrency:
      group: "update_${{ github.ref }}"
      cancel-in-progress: false

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Allow dependabot to check for version
        uses: myplant-io/.github@extending-auto-update

      - name: Checkout github actions repo
        uses: actions/checkout@v3
        with:
          repository: myplant-io/.github
          ref: extending-auto-update
          token: ${{ secrets.CI_PAT }}
          path: source

      - name: Checkout git repository
        if: startsWith(github.event_name , 'pull_request') == false
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: target
          persist-credentials: false

      - name: Checkout git repository (on PR)
        if: startsWith(github.event_name , 'pull_request')
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: target
          persist-credentials: false
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Load workflow config
        run: cat target/.github/workflow-config.env >> $GITHUB_ENV

      - name: Force PROJECT_TYPE env variable
        if: env.PROJECT_TYPE == '' || env.PROJECT_TYPE == 'unknown'
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Please provide a PROJECT_TYPE in workflow-config.env')

      - name: Set env 'BRANCH_NAME'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME' (on PR)
        if: startsWith(github.event_name , 'pull_request')
        run: echo BRANCH_NAME="${{ github.event.pull_request.head.ref }}" >> ${GITHUB_ENV}

      - name: Set 'SOURCE_DIR'
        run: echo SOURCE_DIR="source/workflow-templates" >> ${GITHUB_ENV}

      - name: Set 'TARGET_DIR'
        run: echo TARGET_DIR="target/.github/workflows" >> ${GITHUB_ENV}

      - name: Dump GitHub context
        run: echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}

      - name: Determine file extensions for github action files
        run: echo FILE_TYPE=$(ls ${{ env.TARGET_DIR }}/auto-update* |  tr . \\n | tail -n1) >> ${GITHUB_ENV}

      - name: Log details
        run: |
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "BRANCH_NAME: ${{ env.BRANCH_NAME }}"
          echo "SOURCE_DIR: ${{ env.SOURCE_DIR }}"
          echo "TARGET_DIR: ${{ env.TARGET_DIR }}"
          echo "PROJECT_TYPE: ${{ env.PROJECT_TYPE }}"
          echo "FILE_TYPE: ${{ env.FILE_TYPE }}"

      - name: List source contents
        run: ls ${{ env.SOURCE_DIR }}

      - name: List target contents
        run: ls ${{ env.TARGET_DIR }}

      - name: Move relevant github actions in place (if exist)
        if: env.PROJECT_TYPE != 'unknown'
        run: |
          mv ${{ env.SOURCE_DIR}}/common-merge.yml ${{ env.TARGET_DIR }}/merge.${{ env.FILE_TYPE }} 2>/dev/null || :
          mv ${{ env.SOURCE_DIR}}/common-publish-pre-release.yml ${{ env.TARGET_DIR }}/publish-pre-release.${{ env.FILE_TYPE }} 2>/dev/null || :
          mv ${{ env.SOURCE_DIR}}/common-publish-release.yml ${{ env.TARGET_DIR }}/publish-release.${{ env.FILE_TYPE }} 2>/dev/null || :
          mv ${{ env.SOURCE_DIR}}/common-stage-release-branch.yml ${{ env.TARGET_DIR }}/stage-release-branch.${{ env.FILE_TYPE }} 2>/dev/null || :
          mv ${{ env.SOURCE_DIR}}/${{ env.PROJECT_TYPE }}-dependency-check.yml ${{ env.TARGET_DIR }}/dependency-check.${{ env.FILE_TYPE }} 2>/dev/null || :
          mv ${{ env.SOURCE_DIR}}/${{ env.PROJECT_TYPE }}-sonarqube.yml ${{ env.TARGET_DIR }}/sonarqube.${{ env.FILE_TYPE }} 2>/dev/null || :
          [ ${{contains(env.MANUAL_WORKFLOWS, 'deploy.yml')}} == true ] || mv ${{ env.SOURCE_DIR}}/${{ env.PROJECT_TYPE }}-deploy.yml ${{ env.TARGET_DIR }}/deploy.${{ env.FILE_TYPE }} 2>/dev/null || :
          [ ${{contains(env.MANUAL_WORKFLOWS, 'test.yml')}} == true ]   || mv ${{ env.SOURCE_DIR}}/${{ env.PROJECT_TYPE }}-test.yml ${{ env.TARGET_DIR }}/test.${{ env.FILE_TYPE }} 2>/dev/null || :

      - name: Move relevant github actions in place (if exist)
        if: env.PROJECT_TYPE == 'unknown'
        run: |
          mv ${{ env.SOURCE_DIR}}/common-merge.yml ${{ env.TARGET_DIR }}/merge.${{ env.FILE_TYPE }} 2>/dev/null || :
          mv ${{ env.SOURCE_DIR}}/common-publish-pre-release.yml ${{ env.TARGET_DIR }}/publish-pre-release.${{ env.FILE_TYPE }} 2>/dev/null || :
          mv ${{ env.SOURCE_DIR}}/common-publish-release.yml ${{ env.TARGET_DIR }}/publish-release.${{ env.FILE_TYPE }} 2>/dev/null || :
          mv ${{ env.SOURCE_DIR}}/common-stage-release-branch.yml ${{ env.TARGET_DIR }}/stage-release-branch.${{ env.FILE_TYPE }} 2>/dev/null || :
          mv ${{ env.SOURCE_DIR}}/common-sonarqube.yml ${{ env.TARGET_DIR }}/sonarqube.${{ env.FILE_TYPE }} 2>/dev/null || :

      - name: Move manual workflow templates in place (if not present)
        run: |
          [ -f ${{env.TARGET_DIR}}/test.yml -o ${{contains(env.MANUAL_WORKFLOWS, 'test.yml')}} != true  ]      || mv ${{ env.SOURCE_DIR}}/common-test.yml ${{ env.TARGET_DIR }}/test.${{ env.FILE_TYPE }} 2>/dev/null || :
          [ -f ${{env.TARGET_DIR}}/deploy.yml -o ${{contains(env.MANUAL_WORKFLOWS, 'deploy.yml')}} != true ]   || mv ${{ env.SOURCE_DIR}}/common-deploy.yml ${{ env.TARGET_DIR }}/deploy.${{ env.FILE_TYPE }} 2>/dev/null || :

      - name: Find and delete release-section in README
        run: sed -i '/<\!--- release-section/,/<\!--- release-section-end --->/ d' target/README.md

      - name: Insert release-section in README
        run: cat "${{ env.SOURCE_DIR }}/common-cicd.md" >> "target/README.md"

      - name: Replace {{repo_url}} with actual repo url
        run: sed -i "s/{{repo_url}}/$(printf '%s\n' '${{ github.server_url }}/${{ github.repository }}' | sed -e 's/[\/&]/\\&/g')/" target/README.md

      - name: Find and delete release badges in README
        run: sed -i -E '/\[\!\[Automated Release\]\(/d' target/README.md

      - name: Insert release badges in README
        run: echo -e "[![Automated Release](https://badgen.net/badge/myPlant%20Release/stage/123456?icon=github)](${{ github.server_url }}/${{ github.repository }}/actions/workflows/stage-release-branch.yml)\n[![Automated Release](https://badgen.net/badge/myPlant%20Release/publish/345621?icon=github)](${{ github.server_url }}/${{ github.repository }}/actions/workflows/publish-release.yml)\n$(cat target/README.md)" > target/README.md

      - name: Commit and push changes
        uses: actions-js/push@v1.4
        with:
          branch: ${{ env.BRANCH_NAME }}
          directory: ${{ env.TARGET_DIR }}
          empty: false
          github_token: ${{ secrets.CI_PAT }}
          message: "build: auto-update of GitHub actions [skip ci]"
