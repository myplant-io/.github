name: Build and deploy

on:
  push:
    branches: [develop, release/**, bugfix/**, hotfix/**]
#    tags:
#      - 'v?[0-9]+.[0-9]+.[0-9]+' # release
#      - 'v?[0-9]+.[0-9]+.[0-9]+\-[0-9]+' # pre-release
  release:
    types:
      - released
      - prereleased
  workflow_dispatch:

env:
  COMPONENT_NAME: auto
  PUBLISH_AS_SELF_CONTAINED: false

jobs:
  buildAndDeploy:
    name: "Job: Build and deploy"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: ["5.0.x"]
        dotnet-rid: ["win-x64"]

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Checkout github actions repository
        uses: actions/checkout@v2
        with:
          repository: myplant-io/github-actions
          ref: v0.4.0
          token: ${{ secrets.CI_PAT }}
          path: .github/actions

      - name: Set env 'COMPONENT_NAME'
        if: env.COMPONENT_NAME == 'auto'
        run: echo COMPONENT_NAME="${GITHUB_REPOSITORY#*/}" >> ${GITHUB_ENV}

      - name: Set env 'SHA'
        run: echo SHA="$(echo ${GITHUB_SHA} | cut -c1-7)" >> ${GITHUB_ENV}

      - name: Set env 'TAG' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo TAG="${GITHUB_REF/refs\/tags\//}" >> ${GITHUB_ENV}

      - name: Set env 'MY_VERSION' to SHA (for untagged deployments)
        if: startsWith(github.ref, 'refs/tags/') == false
        run: echo MY_VERSION="${{ env.SHA }}" >> ${GITHUB_ENV}

      - name: Set 'MY_VERSION' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo MY_VERSION="${TAG#v}" >> ${GITHUB_ENV}
          echo VERSION="${TAG#v}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Determine latest (pre-)release
        id: latest_release
        uses: InsonusK/get-latest-release@v1.0.1
        with:
          myToken: ${{ github.token }}
          view_top: 1

      - name: Set env 'IS_AUTO_RELEASE' (a.k.a release triggered by tag)
        run: echo IS_AUTO_RELEASE=${{ startsWith(github.ref, 'refs/tags/') && steps.latest_release.outputs.tag_name != env.TAG }} >> ${GITHUB_ENV}

      - name: Set env 'IS_PRERELEASE' (on auto release)
        if: env.IS_AUTO_RELEASE == 'true'
        run: echo IS_PRERELEASE=${{ contains(env.TAG, '-') == true }} >> ${GITHUB_ENV}

      - name: Set env 'IS_RELEASE' (on auto release)
        if: env.IS_AUTO_RELEASE == 'true'
        run: echo IS_RELEASE=${{ contains(env.TAG, '-') == false && startsWith(github.ref, 'refs/tags/') }} >> ${GITHUB_ENV}

      - name: Set env 'IS_MANUAL_RELEASE' (a.k.a release triggered by user in github - tag based)
        if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_MANUAL_RELEASE=${{ steps.latest_release.outputs.tag_name == env.TAG }} >> ${GITHUB_ENV}

      - name: Set env 'IS_PRERELEASE' (on manual release - tag based)
        if: env.IS_MANUAL_RELEASE == 'true' && startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_PRERELEASE=${{ steps.latest_release.outputs.draft == 'false' && steps.latest_release.outputs.prerelease == 'true' }} >> ${GITHUB_ENV}

      - name: Set env 'IS_RELEASE' (on manual release - tag based)
        if: env.IS_MANUAL_RELEASE == 'true' && startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_RELEASE=${{ steps.latest_release.outputs.draft == 'false' && steps.latest_release.outputs.prerelease == 'false' }} >> ${GITHUB_ENV}

      - name: Set env 'IS_MANUAL_RELEASE' (a.k.a release triggered by user in github - release based)
        if: github.event_name == 'release'
        run: echo IS_MANUAL_RELEASE=true >> ${GITHUB_ENV}

      - name: Set env 'IS_PRERELEASE' (on manual release - release based)
        if: env.IS_MANUAL_RELEASE == 'true' && github.event_name == 'release'
        run: echo IS_PRERELEASE=${{ github.event.release.draft == false && github.event.release.prerelease == true }} >> ${GITHUB_ENV}

      - name: Set env 'IS_RELEASE' (on manual release - release based)
        if: env.IS_MANUAL_RELEASE == 'true' && github.event_name == 'release'
        run: echo IS_RELEASE=${{ github.event.release.draft == false && github.event.release.prerelease == false }} >> ${GITHUB_ENV}

      - name: Log details
        run: |
          echo "BRANCH_NAME: ${{ env.BRANCH_NAME }}"
          echo "COMPONENT_NAME: ${{ env.COMPONENT_NAME }}"
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "IS_AUTO_RELEASE: ${{ env.IS_AUTO_RELEASE }}"
          echo "IS_MANUAL_RELEASE: ${{ env.IS_MANUAL_RELEASE }}"
          echo "IS_PRERELEASE: ${{ env.IS_PRERELEASE }}"
          echo "IS_RELEASE: ${{ env.IS_RELEASE }}"
          echo "TAG: ${{ env.TAG }}"
          echo "VERSION: ${{ env.VERSION }}"
          echo "MY_VERSION: ${{ env.MY_VERSION }}"

      - name: Create new pre-release
        if: env.IS_AUTO_RELEASE == 'true' && env.IS_PRERELEASE == 'true'
        uses: ncipollo/release-action@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          allowUpdates: true
          draft: false
          prerelease: true

      - name: Create new release
        if: env.IS_AUTO_RELEASE == 'true' && env.IS_RELEASE == 'true'
        uses: ncipollo/release-action@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          allowUpdates: true
          draft: false
          prerelease: false

      - name: Prepare dotnet environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Install dependencies
        run: dotnet restore -r ${{ matrix.dotnet-rid }}

      - name: Publish application
        run: |
          dotnet publish "${{ env.COMPONENT_NAME }}/${{ env.COMPONENT_NAME }}.csproj" \
            --no-restore \
            -c Release \
            -r ${{ matrix.dotnet-rid }} \
            -p:PublishSingleFile=true \
            --self-contained ${{ env.PUBLISH_AS_SELF_CONTAINED }} \
            -o "build/${{ env.MY_VERSION }}_${{ matrix.dotnet-version }}_${{ matrix.dotnet-rid }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: error
          name: Release (${{ matrix.dotnet-version }} - ${{ matrix.dotnet-rid }})
          path: "build/${{ env.MY_VERSION }}_${{ matrix.dotnet-version }}_${{ matrix.dotnet-rid }}/"

      - name: Create release artifact archive
        if: env.IS_RELEASE == 'true'
        uses: vimtor/action-zip@v1
        with:
          files: "build/${{ env.MY_VERSION }}_${{ matrix.dotnet-rid }}_${{ matrix.dotnet-rid }}/*"
          dest: "${{ env.COMPONENT_NAME }}_${{ env.MY_VERSION }}_${{ matrix.dotnet-version }}_${{ matrix.dotnet-rid }}.zip"

      - name: Upload release artifact (as assets)
        if: env.IS_RELEASE == 'true'
        uses: AButler/upload-release-assets@v2.0
        with:
          files: "${{ env.COMPONENT_NAME }}_${{ env.MY_VERSION }}_${{ matrix.dotnet-version }}_${{ matrix.dotnet-rid }}.zip"
          release-tag: ${{ env.TAG }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Merging release changes to master
        if: env.IS_RELEASE == 'true' && github.event.release.target_commitish != 'develop'
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.CI_PAT }}
          event-type: merge
          client-payload: '{
            "commitish": "${{ github.event.release.target_commitish }}",
            "source_branch": "${{ env.BRANCH_NAME }}",
            "target_branch": "master",
            "tag": "${{ env.TAG }}"
          }'

      # target_commitish can be "develop" for releases that are solely based on tags
      - name: Merging release changes to master (not using develop commitish, but tag ref)
        if: env.IS_RELEASE == 'true' && github.event.release.target_commitish == 'develop'
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.CI_PAT }}
          event-type: merge
          client-payload: '{
            "source_branch": "${{ env.BRANCH_NAME }}",
            "target_branch": "master",
            "tag": "${{ env.TAG }}"
          }'
