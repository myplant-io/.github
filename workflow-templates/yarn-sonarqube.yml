###
# GitHub action that analyzes the code with the sonarqube scanner and pushes
# the result to the myplant sonarqube (sonar-dev.myplant-io).
#
# Prerequisites:
#  - ".github/workflow-config.env" exists
#
# Created by: Nikolaus Krismer
###
name: Sonarqube

on:
  pull_request:
    branches: [develop]
  push:
    branches: [main, master, develop, release/**, bugfix/**, hotfix/**]
  repository_dispatch:
    types: [sonarqube]
  workflow_dispatch:

jobs:
  sonarqube:
    name: "Job: Sonarqube"
    if: startsWith(github.actor, 'dependabot') == false && contains(github.event.pull_request.labels.*.name, 'dependencies') == false
    runs-on: ubuntu-latest
    concurrency:
      group: "sonarqube_${{ github.ref }}"
      cancel-in-progress: true

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v3
        if: github.event_name != 'repository_dispatch'
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Checkout git repository (for dispatched runs)
        uses: actions/checkout@v3
        if: github.event_name == 'repository_dispatch'
        with:
          fetch-depth: 0
          ref: "${{ github.event.client_payload.branch }}"

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v2
        with:
          fail: true
          files: ".github/workflow-config.env"

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v1
        with:
          envFile: ".github/workflow-config.env"

      - name: Set env 'COMPONENT_NAME'
        if: env.COMPONENT_NAME == 'auto'
        run: echo COMPONENT_NAME="${GITHUB_REPOSITORY#*/}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME'
        if: github.event_name != 'repository_dispatch'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME' (for dispatched runs)
        if: github.event_name == 'repository_dispatch'
        run: echo BRANCH_NAME="${{ github.event.client_payload.branch }}" >> ${GITHUB_ENV}

      - name: Log details
        run: |
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "COMPONENT_NAME: ${COMPONENT_NAME}"
          echo "sonar.branch.name: ${{ env.BRANCH_NAME }}"
          echo "sonar.github.repository: ${{ github.repository }}"
          echo "sonar.pullrequest.base: ${{ github.base_ref }}"
          echo "sonar.pullrequest.branch: ${{ github.head_ref }}"
          echo "sonar.pullrequest.key: ${{ github.event.number }}"

      - name: Prepare node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Add registry credentials
        run: cat <<<${NPM_REGISTRY_AUTH} >> .npmrc; cat .npmrc
        env:
          NPM_REGISTRY_AUTH: ${{ secrets.NPM_REGISTRY_AUTH }}

      - name: Create/restore cache for node_modules
        uses: actions/cache@v3
        id: node_modules-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: ${{ steps.node_modules-cache.outputs.cache-hit != 'true' }}
        run: yarn install --frozen-lockfile

      - name: Determine if config needs to be generated
        id: npm_script_check
        run: echo generate_config_exists=$(npm run | grep 'generate:config' | wc -l) >> ${GITHUB_OUTPUT}

      - name: Generate config files
        if: steps.npm_script_check.generate_config_exists != 0
        run: yarn generate:config

      - name: Run tests
        run: yarn test --coverage

      - name: Setup sonarqube
        uses: warchant/setup-sonar-scanner@v4

      - name: Run sonarqube
        if: startsWith(github.event_name , 'pull_request') == false
        run: sonar-scanner
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.login=${{ secrets.SONAR_LOGIN }}
          -Dsonar.projectKey=${COMPONENT_NAME}
          -Dsonar.branch.name=${BRANCH_NAME}
          -Dsonar.exclusions="**/__tests__/**, **/__mocks__/**"
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Run sonarqube (on PR)
        if: startsWith(github.event_name , 'pull_request')
        run: sonar-scanner
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.login=${{ secrets.SONAR_LOGIN }}
          -Dsonar.projectKey=${COMPONENT_NAME}
          -Dsonar.pullrequest.github.endpoint=https://api.github.com
          -Dsonar.pullrequest.github.repository=${{ github.repository }}
          -Dsonar.pullrequest.base=${{ github.base_ref }}
          -Dsonar.pullrequest.branch=${{ github.head_ref }}
          -Dsonar.pullrequest.key=${{ github.event.number }}
          -Dsonar.exclusions="**/__tests__/**, **/__mocks__/**"
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
          -Dsonar.qualitygate.wait=true
