###
# GitHub action that builds a docker container and deploys it to AWS ECR.
#
# Prerequisites:
#  - ".github/workflow-config.env" exists
#
# Created by: Daniel Hons, Nikolaus Krismer
###
name: Build and deploy

on:
  push:
    branches: [develop, release/**, bugfix/**, hotfix/**]
#    tags:
#      - 'v?[0-9]+.[0-9]+.[0-9]+' # release
#      - 'v?[0-9]+.[0-9]+.[0-9]+\-[0-9]+' # pre-release
  release:
    types:
      - released
      - prereleased
  workflow_dispatch:

jobs:
  buildAndDeploy:
    name: "Job: Build and deploy"
    runs-on: [self-hosted, linux]
    concurrency:
      group: "deploy_${{ github.ref }}"
      cancel-in-progress: false

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v2
        with:
          fail: true
          files: ".github/workflow-config.env"

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: ".github/workflow-config.env"

      - name: Checkout github actions repo
        uses: actions/checkout@v3
        with:
          repository: myplant-io/github-actions
          ref: v0.6.2
          token: ${{ secrets.CI_PAT }}
          path: .github/actions

      - name: Set env 'COMPONENT_NAME'
        if: env.COMPONENT_NAME == 'auto'
        run: echo COMPONENT_NAME="${GITHUB_REPOSITORY#*/}" >> ${GITHUB_ENV}

      - name: Set env 'DOCKER_TAG_PREFIX'
        if: env.DOCKER_TAG_PREFIX == 'auto'
        run: echo DOCKER_TAG_PREFIX="${COMPONENT_NAME}_" >> ${GITHUB_ENV}

      - name: Set env 'SHA'
        run: echo SHA="$(echo ${GITHUB_SHA} | cut -c1-7)" >> ${GITHUB_ENV}

      - name: Set env 'TAG' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo TAG="${GITHUB_REF#refs/tags/}" >> ${GITHUB_ENV}

      - name: Set env 'VERSION' to SHA (for untagged deployments)
        if: startsWith(github.ref, 'refs/tags/') == false
        run: echo VERSION="${{ env.SHA }}" >> ${GITHUB_ENV}

      - name: Set 'VERSION' (for tagged deployment)
        if: startsWith(github.ref, 'refs/tags/')
        run: echo VERSION="${TAG#v}" >> ${GITHUB_ENV}

      - name: Set env 'BRANCH_NAME'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Determine latest (pre-)release
        id: latest_release
        uses: InsonusK/get-latest-release@v1.1.0
        with:
          myToken: ${{ github.token }}
          view_top: 1

      - name: Set env 'IS_MANUAL_RELEASE' (a.k.a release triggered by user in github - tag based)
        if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_MANUAL_RELEASE=${{ steps.latest_release.outputs.tag_name == env.TAG }} >> ${GITHUB_ENV}

      - name: Set env 'IS_PRERELEASE' (on manual release - tag based)
        if: env.IS_MANUAL_RELEASE == 'true' && startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_PRERELEASE=${{ steps.latest_release.outputs.draft == 'false' && steps.latest_release.outputs.prerelease == 'true' }} >> ${GITHUB_ENV}

      - name: Set env 'IS_RELEASE' (on manual release - tag based)
        if: env.IS_MANUAL_RELEASE == 'true' && startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        run: echo IS_RELEASE=${{ steps.latest_release.outputs.draft == 'false' && steps.latest_release.outputs.prerelease == 'false' }} >> ${GITHUB_ENV}

      - name: Set env 'IS_MANUAL_RELEASE' (a.k.a release triggered by user in github - release based)
        if: github.event_name == 'release'
        run: echo IS_MANUAL_RELEASE=true >> ${GITHUB_ENV}

      - name: Set env 'IS_PRERELEASE' (on manual release - release based)
        if: env.IS_MANUAL_RELEASE == 'true' && github.event_name == 'release'
        run: echo IS_PRERELEASE=${{ github.event.release.draft == false && github.event.release.prerelease == true }} >> ${GITHUB_ENV}

      - name: Set env 'IS_RELEASE' (on manual release - release based)
        if: env.IS_MANUAL_RELEASE == 'true' && github.event_name == 'release'
        run: echo IS_RELEASE=${{ github.event.release.draft == false && github.event.release.prerelease == false }} >> ${GITHUB_ENV}

      - name: Initialize 'DEPLOY_TARGETS'
        run: echo DEPLOY_TARGETS=none >> ${GITHUB_ENV}

      - name: Initialize 'RETAG'
        run: echo RETAG=false >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' for push (to alpha/staging)
        if: env.BRANCH_NAME == 'develop' && env.PUSH_DEPLOY_TARGET != 'none'
        run: echo DEPLOY_TARGETS=$(echo ${PUSH_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' pre-release
        if: env.IS_PRERELEASE == 'true' && env.PRE_RELEASE_DEPLOY_TARGET != 'none'
        run: echo DEPLOY_TARGETS=$(echo ${PRE_RELEASE_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' for release
        if: env.IS_RELEASE == 'true' &&  env.RELEASE_DEPLOY_TARGET != 'none'
        run: echo DEPLOY_TARGETS=$(echo ${RELEASE_DEPLOY_TARGET} | sed 's|${COMPONENT_NAME}|'"${{ env.COMPONENT_NAME }}"'|g') >> ${GITHUB_ENV}

      - name: Set env 'DEPLOY_TARGETS' for master branch (only run build task; never deploy)
        if: env.BRANCH_NAME == 'master'
        run: echo DEPLOY_TARGETS="none" >> ${GITHUB_ENV}

      - name: Log details
        run: |
          echo "BRANCH_NAME: ${{ env.BRANCH_NAME }}"
          echo "COMPONENT_NAME: ${{ env.COMPONENT_NAME }}"
          echo "DEPLOY_TARGETS: ${{ env.DEPLOY_TARGETS }}"
          echo "DEPLOYMENT_REPO: ${{ env.DEPLOYMENT_REPO }}"
          echo "DOCKER_TAG_PREFIX: ${{ env.DOCKER_TAG_PREFIX }}"
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "IS_MANUAL_RELEASE: ${{ env.IS_MANUAL_RELEASE }}"
          echo "IS_PRERELEASE: ${{ env.IS_PRERELEASE }}"
          echo "IS_RELEASE: ${{ env.IS_RELEASE }}"
          echo "TAG: ${{ env.TAG }}"
          echo "VERSION: ${{ env.VERSION }}"

      - name: Find Version Infos
        id: versioning
        if: env.IS_MANUAL_RELEASE == 'true' && (env.IS_RELEASE == 'true' || env.IS_PRERELEASE == 'true')
        env: 
          IS_RELEASE: ${{ env.IS_RELEASE }}
        shell: bash
        run: |
            branchTag=$(git describe --tags)

            [[ "${branchTag#v}" =~ ^[0-9]+\.[0-9]+\.[0-9] ]] || exit 1

            # if there is no prior release, this will be the first one, set the ref to the initial commit to build the first release
            lastRelTag=$(git tag -l | grep -v "${branchTag}" | grep -v ".*-.*" | tail -n 1) || lastRelTag=$(git rev-list --max-parents=0 HEAD)
            lastTag=$(git tag -l | grep -vx "${branchTag}" | tail -n 1)
            shaShort="$(echo ${GITHUB_SHA} | cut -c1-7)"

            echo SHA_SHORT=$shaShort >> ${GITHUB_ENV}
            echo LAST_REL_TAG=$lastRelTag >> ${GITHUB_ENV}
            echo BRANCH_TAG=$branchTag >> ${GITHUB_ENV}
            echo LAST_VERSION=${lastTag#v} >> ${GITHUB_ENV}

            if ${IS_RELEASE}; then
              echo BUILD_FROM_TAG=$lastRelTag >> ${GITHUB_ENV}
            else
            echo BUILD_FROM_TAG= >> ${GITHUB_ENV}
            fi;

      - name: Build changelog on manual release
        id: build_changelog
        if: env.IS_MANUAL_RELEASE == 'true' && (env.IS_RELEASE == 'true' || env.IS_PRERELEASE == 'true')
        uses: mikepenz/release-changelog-builder-action@v4.0.0-b02
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          configurationJson: |
            {
              "pr_template": "- #{{TITLE}} (by @#{{AUTHOR}} in ##{{NUMBER}})"
            }
          outputFile: release_changelog.md
          fromTag: ${{ steps.versioning.outputs.buildFromTag }}
          toTag: ${{ steps.versioning.outputs.relTag }}

      - name: Enhance changelog
        id: enhance_changelog
        if: env.IS_MANUAL_RELEASE == 'true' && (env.IS_RELEASE == 'true' || env.IS_PRERELEASE == 'true')
        shell: bash
        run: |
          sed -i "s/DD-\([0-9]*\)/[DD-\1](https:\/\/innio.atlassian.net\/browse\/DD-\1)/g" release_changelog.md

      - name: Update Release
        if: env.IS_MANUAL_RELEASE == 'true' && (env.IS_RELEASE == 'true' || env.IS_PRERELEASE == 'true')
        uses: tubone24/update_release@v1.3.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ env.TAG }}
        with:
          body_path: release_changelog.md

      - name: Check Re-Tag docker image
        if: env.IS_MANUAL_RELEASE == 'true' && env.IS_RELEASE == 'true'
        env:
          relTag: ${{ env.VERSION }}
          preRelTag: ${{ env.LAST_VERSION }}
        shell: bash
        run: |
            echo "Check if tags are on same rev"

            prevSHA=$(git rev-list -n 1 refs/tags/v$preRelTag)
            curSHA=$(git rev-list -n 1 refs/tags/v$relTag)

            if [ $prevSHA == $curSHA ]; then
              echo RETAG=true >> ${GITHUB_ENV}
              echo "Adding tag $relTag to image with tag $preRelTag"
            fi;

      - name: Prepare node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Add registry credentials
        run: cat <<<${NPM_REGISTRY_AUTH} >> .npmrc; cat .npmrc
        env:
          NPM_REGISTRY_AUTH: ${{ secrets.NPM_REGISTRY_AUTH }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_USER }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET }}
          aws-region: us-east-1

      - name: Retag docker image
        id: check-docker-registry
        if: env.IS_MANUAL_RELEASE == 'true' && env.IS_RELEASE == 'true' && env.RETAG == 'true'
        uses: ./.github/actions/check-docker-registry
        with:
          imagePrefix: ${{ env.DOCKER_TAG_PREFIX }}
          version: ${{ env.VERSION }}
          sha: ${{ env.LAST_VERSION }}

      - name: Create/restore cache for node_modules
        uses: actions/cache@v3
        id: node_modules-cache
        if: env.RETAG == 'false'
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies (if not previously cached)
        if: ${{ steps.node_modules-cache.outputs.cache-hit != 'true' && env.RETAG == 'false' }}
        run: yarn install --frozen-lockfile

      - name: Determine if config needs to be generated
        id: npm_script_check
        if: env.RETAG == 'false'
        run: echo generate_config_exists=$(npm run | grep 'generate:config' | wc -l) >> ${GITHUB_OUTPUT}

      - name: Generate config files
        if: env.RETAG == 'false' && steps.npm_script_check.outputs.generate_config_exists != 0
        run: yarn generate:config

      - name: Validate code
        if: env.RETAG == 'false'
        run: yarn validate

      - name: Test code
        if: env.RETAG == 'false'
        run: yarn test

      - name: Build application
        if: env.RETAG == 'false'
        run: yarn build

      - name: Login to Amazon ECR
        if: env.RETAG == 'false'
        id: aws-login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up QEMU
        if: env.RETAG == 'false'
        uses: docker/setup-qemu-action@v2

      - name: Check for docker context
        if: env.RETAG == 'false'
        id: docker-context-check
        run: echo contextFound=$(docker context ls | grep -w 'buildx' | wc -l) >> ${GITHUB_OUTPUT}

      - name: Set up Docker Context for Buildx
        if: env.RETAG == 'false' && steps.docker-context-check.outputs.contextFound == 0
        run: docker context create buildx-context

      - name: Set up Docker Buildx
        if: env.RETAG == 'false'
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: buildx-context

      - name: Build and push docker image
        if: env.RETAG == 'false'
        uses: docker/build-push-action@v4
        env:
          DOCKER_BUILDKIT: 1
        with:
          context: .
          provenance: false
          push: true
          tags: ${{ steps.aws-login-ecr.outputs.registry }}/${{ env.DOCKER_REPOSITORY }}:${{ env.DOCKER_TAG_PREFIX }}${{ env.VERSION }}

      - name: Deploy service
        if: env.DEPLOY_TARGETS != 'none'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.CI_PAT }}
          repository: myplant-io/ci-deploy-action
          event-type: deploy
          client-payload: '{
            "deployment_repo": "${{ env.DEPLOYMENT_REPO }}",
            "docker_tag_prefix": "${{ env.DOCKER_TAG_PREFIX }}",
            "version": "${{ env.VERSION }}",
            "component_name": "${{ env.COMPONENT_NAME }}",
            "deployment_files": ${{ env.DEPLOY_TARGETS }}
          }'

      - name: Merging release changes to master
        if: env.IS_RELEASE == 'true' && github.event.release.target_commitish != 'develop'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.CI_PAT }}
          event-type: merge
          client-payload: '{
            "commitish": "${{ github.event.release.target_commitish }}",
            "source_branch": "${{ env.BRANCH_NAME }}",
            "target_branch": "master",
            "tag": "${{ env.TAG }}"
          }'

      # target_commitish can be "develop" for releases that are solely based on tags
      - name: Merging release changes to master (not using develop commitish, but tag ref)
        if: env.IS_RELEASE == 'true' && github.event.release.target_commitish == 'develop'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.CI_PAT }}
          event-type: merge
          client-payload: '{
            "source_branch": "${{ env.BRANCH_NAME }}",
            "target_branch": "master",
            "tag": "${{ env.TAG }}"
          }'
