###
# GitHub action that runs tests on the code.
#
# Created by: Andreas Schachinger, Nikolaus Krismer
###
name: Validate and test

on:
  pull_request:
    branches: [develop, release/**, bugfix/**, hotfix/**]
    paths-ignore:
      - '.github/workflows/*auto-update*'
  workflow_dispatch:

jobs:
  setup:
    name: 'Job: Python setup'
    runs-on: [self-hosted-standard]
    outputs:
      pythonVersionFile: ${{steps.set_outputs.outputs.pythonVersionFile}}

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: .

      - name: Check python version determination (pyproject.toml)
        id: check_file_pyproject
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: 'pyproject.toml'

      - name: Use pyproject.toml as python version file
        if: steps.check_file_pyproject.outputs.files_exists == 'true'
        run: echo PYTHON_VERSION_FILE="pyproject.toml" >> ${GITHUB_ENV}

      - name: Check python version determination (.python-version)
        if: steps.check_file_pyproject.outputs.files_exists == 'false'
        id: check_file_python_version
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: '.python-version'

      - name: Use .python-version as python version file
        if: steps.check_file_python_version.outputs.files_exists == 'true'
        run: echo PYTHON_VERSION_FILE=".python-version" >> ${GITHUB_ENV}

      - name: Check python version determination
        if: steps.check_file_pyproject.outputs.files_exists == 'false' &&  steps.check_file_python_version.outputs.files_exists == 'false'
        run: |
          echo "::error Either pyproject.toml or .python-version must exists (and contain a python version number)"
          exit 1

      - id: set_outputs
        name: Set python version file
        run: echo pythonVersionFile="${{ env.PYTHON_VERSION_FILE}}" >> ${GITHUB_OUTPUT}

  validate:
    name: 'Job: Validate'
    needs: ['setup']
    runs-on: [self-hosted-standard]

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v3
        with:
          fail: true
          files: '.github/workflow-config.env'

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/workflow-config.env'

      - name: Set env 'BRANCH_NAME'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Get action system info
        if: env.VERBOSE_LOGGING == 'true'
        id: system-info
        uses: kenchan0130/actions-system-info@v1.3.0

      - name: Log env context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(env) }}

      - name: Log GitHub context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(github) }}

      - name: Log system details
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "os: ${{ runner.os }}"
          echo "host.cpu-model: ${{ steps.system-info.outputs.cpu-model }}"
          echo "host.cpu-core: ${{ steps.system-info.outputs.cpu-core }}"
          echo "host.name: ${{ steps.system-info.outputs.hostname }}"
          echo "os.name: ${{ steps.system-info.outputs.name }}"
          echo "os.kernel.release: ${{ steps.system-info.outputs.kernel-release }}"
          echo "os.kernel.version: ${{ steps.system-info.outputs.kernel-version }}"
          echo "os.platform: ${{ steps.system-info.outputs.platform }}"
          echo "os.release: ${{ steps.system-info.outputs.release }}"

      - name: Check poetry file existence
        id: check_poetry
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: 'poetry.lock'

      - name: Prepare poetry
        if: steps.check_poetry.outputs.files_exists == 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        if: steps.check_poetry.outputs.files_exists == 'true'
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Prepare python (with pip)
        if: steps.check_poetry.outputs.files_exists == 'false'
        uses: actions/setup-python@v5
        with:
          cache: 'pip'
          python-version-file: ${{ needs.setup.outputs.pythonVersionFile }}

      - name: Prepare python (with poetry)
        if: steps.check_poetry.outputs.files_exists == 'true'
        uses: actions/setup-python@v5
        with:
          cache: 'poetry'
          python-version-file: ${{ needs.setup.outputs.pythonVersionFile }}

      - name: Check for pre-commit configuration
        id: pre-commit-config
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: '.pre-commit-config.yaml'

      - name: Configure poetry
        if: steps.check_poetry.outputs.files_exists == 'true'
        run: |
          poetry config repositories.myplant_nexus https://nexus-dev.myplant.io/repository/myplantpy/simple
          poetry config repositories.myplant_nexus_external https://nexus-dev.myplant.io/repository/myplantpyexternal/simple
          poetry config http-basic.myplant_nexus myplant-publisher ${{secrets.NEXUS_MYPLANT_PUBLISHER}}
          poetry config http-basic.myplant_nexus_external myplant-publisher ${{secrets.NEXUS_MYPLANT_PUBLISHER}}

      - name: Install dependencies (with pip)
        if: steps.check_poetry.outputs.files_exists == 'false' && steps.pre-commit-config.outputs.files_exists == 'true'
        run: |
          pip install -r requirements.txt \
               --index-url "https://myplant-publisher:${{secrets.NEXUS_MYPLANT_PUBLISHER}}@nexus-dev.myplant.io/repository/myplantpy/simple" \
               --extra-index-url "https://myplant-publisher:${{secrets.NEXUS_MYPLANT_PUBLISHER}}@nexus-dev.myplant.io/repository/myplantpyexternal/simple" \
               --extra-index-url "https://pypi.org/simple"

      - name: Install pre-commit (with pip)
        if: steps.check_poetry.outputs.files_exists == 'false' && steps.pre-commit-config.outputs.files_exists == 'true'
        run: pip install pre-commit

      - name: Install dependencies (with poetry)
        if: steps.check_poetry.outputs.files_exists == 'true' && steps.pre-commit-config.outputs.files_exists == 'true'
        run: |
          poetry install --no-interaction --no-root --sync
          poetry run pip install pre-commit

      - name: Run pre-commit (on PR with pip)
        if: env.BRANCH_NAME != 'develop' && steps.check_poetry.outputs.files_exists == 'false' && steps.pre-commit-config.outputs.files_exists == 'true'
        run: pre-commit run --show-diff-on-failure --color=always --all-files

      - name: Run pre-commit (on develop with pip)
        if: env.BRANCH_NAME == 'develop' && steps.check_poetry.outputs.files_exists == 'false' && steps.pre-commit-config.outputs.files_exists == 'true'
        run: SKIP=no-commit-to-branch pre-commit run --show-diff-on-failure --color=always --all-files

      - name: Run pre-commit (on PR with poetry)
        if: env.BRANCH_NAME != 'develop' && steps.check_poetry.outputs.files_exists == 'true' && steps.pre-commit-config.outputs.files_exists == 'true'
        run: |
          source .venv/bin/activate
          pre-commit run --show-diff-on-failure --color=always --all-files

      - name: Run pre-commit (on develop with poetry)
        if: env.BRANCH_NAME == 'develop' && steps.check_poetry.outputs.files_exists == 'true' && steps.pre-commit-config.outputs.files_exists == 'true'
        run: |
          source .venv/bin/activate
          SKIP=no-commit-to-branch pre-commit run --show-diff-on-failure --color=always --all-files

  test:
    name: 'Job: Test'
    needs: ['setup', 'validate']
    runs-on: [self-hosted-standard]

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout git repository
        uses: actions/checkout@v4

      - name: Check workflow config file existence
        uses: andstor/file-existence-action@v3
        with:
          fail: true
          files: '.github/workflow-config.env'

      - name: Load workflow config (.env file)
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/workflow-config.env'

      - name: Set env 'BRANCH_NAME'
        run: echo BRANCH_NAME="${GITHUB_REF#refs/heads/}" >> ${GITHUB_ENV}

      - name: Get action system info
        if: env.VERBOSE_LOGGING == 'true'
        id: system-info
        uses: kenchan0130/actions-system-info@v1.3.0

      - name: Log env context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(env) }}

      - name: Log GitHub context
        if: env.VERBOSE_LOGGING == 'true'
        run: echo $JSON | jq
        env:
          JSON: ${{ toJSON(github) }}

      - name: Log system details
        if: env.VERBOSE_LOGGING == 'true'
        run: |
          echo "os: ${{ runner.os }}"
          echo "host.cpu-model: ${{ steps.system-info.outputs.cpu-model }}"
          echo "host.cpu-core: ${{ steps.system-info.outputs.cpu-core }}"
          echo "host.name: ${{ steps.system-info.outputs.hostname }}"
          echo "os.name: ${{ steps.system-info.outputs.name }}"
          echo "os.kernel.release: ${{ steps.system-info.outputs.kernel-release }}"
          echo "os.kernel.version: ${{ steps.system-info.outputs.kernel-version }}"
          echo "os.platform: ${{ steps.system-info.outputs.platform }}"
          echo "os.release: ${{ steps.system-info.outputs.release }}"

      - name: Check poetry file existence
        id: check_poetry
        uses: andstor/file-existence-action@v3
        with:
          fail: false
          files: 'poetry.lock'

      - name: Prepare poetry
        if: steps.check_poetry.outputs.files_exists == 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        if: steps.check_poetry.outputs.files_exists == 'true'
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Prepare python (with pip)
        if: steps.check_poetry.outputs.files_exists == 'false'
        uses: actions/setup-python@v5
        with:
          cache: 'pip'
          python-version-file: ${{ needs.setup.outputs.pythonVersionFile }}

      - name: Prepare python (with poetry)
        if: steps.check_poetry.outputs.files_exists == 'true'
        uses: actions/setup-python@v5
        with:
          cache: 'poetry'
          python-version-file: ${{ needs.setup.outputs.pythonVersionFile }}

      - name: Configure poetry
        if: steps.check_poetry.outputs.files_exists == 'true'
        run: |
          poetry config repositories.myplant_nexus https://nexus-dev.myplant.io/repository/myplantpy/simple
          poetry config repositories.myplant_nexus_external https://nexus-dev.myplant.io/repository/myplantpyexternal/simple
          poetry config http-basic.myplant_nexus myplant-publisher ${{secrets.NEXUS_MYPLANT_PUBLISHER}}
          poetry config http-basic.myplant_nexus_external myplant-publisher ${{secrets.NEXUS_MYPLANT_PUBLISHER}}

      - name: Install dependencies (including pytest; with pip)
        if: steps.check_poetry.outputs.files_exists == 'false'
        run: |
          pip install -r requirements.txt \
               --index-url "https://myplant-publisher:${{secrets.NEXUS_MYPLANT_PUBLISHER}}@nexus-dev.myplant.io/repository/myplantpy/simple" \
               --extra-index-url "https://myplant-publisher:${{secrets.NEXUS_MYPLANT_PUBLISHER}}@nexus-dev.myplant.io/repository/myplantpyexternal/simple" \
               --extra-index-url "https://pypi.org/simple"
          pip install pytest

      - name: Install dependencies (including pytest; with poetry)
        if: steps.check_poetry.outputs.files_exists == 'true'
        run: |
          poetry install --no-interaction --no-root --sync
          poetry run pip install pytest

      - name: Check for test availability (with pip)
        id: check_test_pip
        if: steps.check_poetry.outputs.files_exists == 'false'
        run: echo testCount=$(pytest --collect-only -q | head -n -2 | wc -l) >> ${GITHUB_OUTPUT}

      - name: Check for test availability (with poetry)
        id: check_test_poetry
        if: steps.check_poetry.outputs.files_exists == 'true'
        run: |
          source .venv/bin/activate
          echo testCount=$(pytest --collect-only -q | head -n -2 | wc -l) >> ${GITHUB_OUTPUT}

      - name: Skip tests (no test found with pip)
        if: steps.check_poetry.outputs.files_exists == 'false' && steps.check_test_pip.outputs.testCount == 0
        run: |
          echo "No test(s) found. Skipping..."
          gh run cancel ${{ github.run_id }}
          gh run watch ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip tests (no test found with poetry)
        if: steps.check_poetry.outputs.files_exists == 'true' && steps.check_test_poetry.outputs.testCount == 0
        run: |
          echo "No test(s) found. Skipping..."
          gh run cancel ${{ github.run_id }}
          gh run watch ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test with pytest (with pip)
        if: steps.check_poetry.outputs.files_exists == 'false' && steps.check_test_pip.outputs.testCount != 0
        run: pytest

      - name: Test with pytest (with poetry)
        if: steps.check_poetry.outputs.files_exists == 'true' && steps.check_test_poetry.outputs.testCount != 0
        run: |
          source .venv/bin/activate
          pytest
